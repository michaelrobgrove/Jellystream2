{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nAlfredFlix is a modern, Netflix-like web interface for Jellyfin media servers that provides a premium streaming experience with integrated billing, quality selection, and multi-device support. The application features a React-based frontend with a Node.js/Express backend, designed to offer both standard and premium subscription tiers with automatic plan detection based on Jellyfin library permissions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nTesting protocol: Create temporary users for testing, user will delete after to avoid dashboard clutter.\nUser cleanup: Removed all test users except masteradm and srvadmin as requested.\nWebsite improvements: Enhanced home page with movie/TV show focused design, removed review section, improved mobile responsiveness.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type-safe component development\n- **Routing**: Wouter for lightweight client-side routing with protected routes\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent, modern UI design\n- **State Management**: React Context API for authentication state, with TanStack Query for server state management\n- **Build System**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js for RESTful API endpoints\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Authentication**: Session-based authentication with Jellyfin server integration\n- **Storage Strategy**: In-memory storage implementation for development, with database schema ready for production\n\n## Data Layer\n- **Primary Database**: PostgreSQL with Drizzle migrations\n- **Schema Design**: \n  - Users table with Jellyfin integration fields (jellyfinUserId, planType, subscription data)\n  - Contact messages table for customer support\n  - Watch progress tracking for resume functionality\n- **ORM**: Drizzle for type-safe queries and automatic TypeScript inference\n\n## Authentication & Authorization\n- **Authentication Flow**: Direct integration with Jellyfin server for user validation\n- **Plan Detection**: Automatic tier assignment based on Jellyfin library access permissions\n- **Session Management**: In-memory session storage with persistent login capability\n- **Access Control**: Role-based access to 4K content based on subscription tier\n\n## Media Integration\n- **Primary Source**: Jellyfin media server API for content retrieval and playback\n- **Search Enhancement**: Hybrid search combining local Jellyfin content with TMDB database\n- **Quality Management**: Dynamic quality selection with automatic merging of standard/UHD versions\n- **Progress Tracking**: Integration with Jellyfin's watch progress system\n\n# External Dependencies\n\n## Media Services\n- **Jellyfin Server**: Core media server at watch.alfredflix.stream for content management and streaming (temporary DNS - will change back to apex.alfredflix.stream when DNS propagates)\n- **Jellyseerr**: Content request management system at requests.alfredflix.stream with API key authentication\n- **TMDB API**: Movie/TV show metadata and search enhancement with API key 88c86aad48e750e724b36296cc69383f\n\n## Database & Infrastructure\n- **Neon Database**: Serverless PostgreSQL database with connection pooling via @neondatabase/serverless\n- **Database URL**: Environment variable configuration for flexible deployment\n- **Referral System**: Added referral_code, referred_by, and referral_credits columns to users table\n\n## Payment Processing\n- **Stripe Integration**: \n  - React Stripe.js components for secure payment forms\n  - Webhook handling for subscription lifecycle management\n  - Predefined pricing tiers ($9.99 Standard, $14.99 Premium)\n  - **Coupon Support**: Stripe coupon validation and discount application\n  - **Referral Program**: New users get $1 first month, referring users get $5 credit (max 3 stacked)\n\n## UI Components & Styling\n- **Radix UI**: Comprehensive set of unstyled, accessible components\n- **Tailwind CSS**: Utility-first CSS framework with custom AlfredFlix theming\n- **Lucide React**: Modern icon library for consistent iconography\n\n## Development Tools\n- **TypeScript**: Full type safety across frontend and backend\n- **ESBuild**: Fast bundling for production server builds\n- **Replit Integration**: Development environment plugins and runtime error handling","size_bytes":4434},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport passport from \"passport\";\nimport MemoryStore from \"memorystore\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Session configuration\nconst store = MemoryStore(session);\napp.use(session({\n  secret: process.env.SESSION_SECRET || 'dev-session-secret-change-in-production',\n  resave: false,\n  saveUninitialized: false,\n  store: new store({\n    checkPeriod: 86400000 // Prune expired entries every 24h\n  }),\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    maxAge: 24 * 60 * 60 * 1000 // 24 hours\n  }\n}));\n\n// Initialize passport\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2694},"server/referral.ts":{"content":"import { storage } from './storage';\nimport { nanoid } from 'nanoid';\n\nexport interface ReferralResult {\n  success: boolean;\n  message: string;\n  discount?: {\n    type: 'amount' | 'percentage';\n    value: number;\n  };\n}\n\nexport class ReferralService {\n  // Generate a unique referral code for a user\n  static generateReferralCode(): string {\n    return nanoid(8).toUpperCase();\n  }\n\n  // Apply referral when a new user signs up\n  static async applyReferral(newUserUsername: string, referralCode: string): Promise<ReferralResult> {\n    try {\n      // Find the referring user by username (case insensitive)\n      const referringUser = await storage.getUserByUsername(referralCode.toLowerCase());\n      \n      if (!referringUser) {\n        return {\n          success: false,\n          message: 'Invalid referral code'\n        };\n      }\n\n      // Check if referring user has reached max referrals (3)\n      const currentCredits = parseFloat(referringUser.referralCredits || '0');\n      const maxCredits = 15.00; // 3 referrals × $5 each\n      \n      if (currentCredits >= maxCredits) {\n        return {\n          success: false,\n          message: 'Referral limit reached for this user'\n        };\n      }\n\n      // Add $5 credit to referring user\n      const newCredits = Math.min(currentCredits + 5.00, maxCredits);\n      await storage.updateReferralCredits(referringUser.id, newCredits.toString());\n\n      // New user gets $1 first month discount\n      return {\n        success: true,\n        message: 'Referral applied successfully',\n        discount: {\n          type: 'amount',\n          value: 100 // $1 in cents for Stripe\n        }\n      };\n    } catch (error) {\n      console.error('Error applying referral:', error);\n      return {\n        success: false,\n        message: 'Failed to apply referral'\n      };\n    }\n  }\n\n  // Get referral stats for a user\n  static async getReferralStats(userId: string) {\n    try {\n      const user = await storage.getUser(parseInt(userId));\n      if (!user) return null;\n\n      const credits = parseFloat(user.referralCredits || '0');\n      const maxCredits = 15.00;\n      const remainingReferrals = Math.max(0, 3 - Math.floor(credits / 5));\n\n      return {\n        referralCode: user.referralCode || user.username,\n        credits: credits,\n        remainingReferrals: remainingReferrals,\n        totalReferrals: Math.floor(credits / 5)\n      };\n    } catch (error) {\n      console.error('Error getting referral stats:', error);\n      return null;\n    }\n  }\n}","size_bytes":2503},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport * as referral from \"./referral\";\nimport { insertContactMessageSchema, insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Stripe from \"stripe\";\nimport axios from \"axios\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport Mailgun from \"mailgun.js\";\nimport FormData from \"form-data\";\nimport { ReferralService } from \"./referral\";\nimport { nanoid } from \"nanoid\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\n// Initialize Mailgun\nconst mailgun = new Mailgun(FormData);\nconst mg = mailgun.client({\n  username: 'api',\n  key: process.env.MAILGUN_API_KEY || '',\n});\n\n// Email service functions\nasync function sendWelcomeEmail(email: string, username: string, password: string, planType: string) {\n  if (!process.env.MAILGUN_API_KEY || !process.env.MAILGUN_DOMAIN || !process.env.MAILGUN_FROM_EMAIL) {\n    console.warn('Mailgun not configured, skipping welcome email');\n    return;\n  }\n\n  try {\n    const messageData = {\n      from: process.env.MAILGUN_FROM_EMAIL,\n      to: email,\n      subject: 'Welcome to AlfredFlix - Your Account is Ready!',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #111; color: #fff; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #f59e0b; margin: 0;\">AlfredFlix</h1>\n            <p style=\"color: #9ca3af; margin: 5px 0;\">Premium Streaming Experience</p>\n          </div>\n          \n          <h2 style=\"color: #f59e0b;\">Welcome ${username}!</h2>\n          <p>Your AlfredFlix account has been created successfully. Here are your login details:</p>\n          \n          <div style=\"background: #1f1f1f; border: 1px solid #374151; border-radius: 8px; padding: 20px; margin: 20px 0;\">\n            <h3 style=\"color: #f59e0b; margin-top: 0;\">Login Details</h3>\n            <p><strong>Username:</strong> ${username}</p>\n            <p><strong>Password:</strong> ${password}</p>\n            <p><strong>Plan:</strong> ${planType.charAt(0).toUpperCase() + planType.slice(1)}</p>\n            <p><strong>Login URL:</strong> <a href=\"https://alfredflix.stream/login\" style=\"color: #f59e0b;\">https://alfredflix.stream/login</a></p>\n          </div>\n          \n          <p>You can now access your premium streaming library and start enjoying your content.</p>\n          <p style=\"color: #9ca3af; font-size: 14px; margin-top: 30px;\">If you have any questions, please contact our support team.</p>\n        </div>\n      `\n    };\n\n    await mg.messages.create(process.env.MAILGUN_DOMAIN, messageData);\n    console.log(`Welcome email sent to ${email}`);\n  } catch (error) {\n    console.error('Failed to send welcome email:', error);\n  }\n}\n\nasync function sendAccountDeletionEmail(email: string, username: string) {\n  if (!process.env.MAILGUN_API_KEY || !process.env.MAILGUN_DOMAIN || !process.env.MAILGUN_FROM_EMAIL) {\n    return;\n  }\n\n  try {\n    const messageData = {\n      from: process.env.MAILGUN_FROM_EMAIL,\n      to: email,\n      subject: 'AlfredFlix Account Deleted',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #111; color: #fff; padding: 20px;\">\n          <div style=\"text-align: center; margin-bottom: 30px;\">\n            <h1 style=\"color: #f59e0b; margin: 0;\">AlfredFlix</h1>\n          </div>\n          \n          <h2 style=\"color: #f59e0b;\">Account Deleted</h2>\n          <p>Hello ${username},</p>\n          <p>Your AlfredFlix account has been deleted as requested. All your data and access has been removed.</p>\n          <p>If this was done in error, please contact our support team immediately.</p>\n          <p style=\"color: #9ca3af; font-size: 14px; margin-top: 30px;\">Thank you for being part of AlfredFlix.</p>\n        </div>\n      `\n    };\n\n    await mg.messages.create(process.env.MAILGUN_DOMAIN, messageData);\n    console.log(`Account deletion email sent to ${email}`);\n  } catch (error) {\n    console.error('Failed to send deletion email:', error);\n  }\n}\n\nasync function sendAdminNotificationEmail(username: string, email: string, expiresAt: string | null, planType: string) {\n  if (!process.env.MAILGUN_API_KEY || !process.env.MAILGUN_DOMAIN || !process.env.MAILGUN_FROM_EMAIL) {\n    console.log('Mailgun not configured, skipping admin notification email');\n    return;\n  }\n\n  try {\n    const expirationDate = expiresAt ? new Date(expiresAt).toLocaleDateString() : 'Never expires';\n    \n    const messageData = {\n      from: process.env.MAILGUN_FROM_EMAIL,\n      to: 'accts@alfredflix.stream',\n      subject: `New AlfredFlix Account: ${username}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #f8f9fa; padding: 30px; border-radius: 8px;\">\n          <h2 style=\"color: #333; margin-bottom: 20px;\">🆕 New Account Alert</h2>\n          \n          <div style=\"background: white; padding: 20px; border-radius: 6px; border-left: 4px solid #f59e0b;\">\n            <h3 style=\"color: #f59e0b; margin-top: 0;\">Account Details</h3>\n            <table style=\"width: 100%; border-collapse: collapse;\">\n              <tr>\n                <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Username:</td>\n                <td style=\"padding: 8px 0; color: #333;\">${username}</td>\n              </tr>\n              <tr>\n                <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Email:</td>\n                <td style=\"padding: 8px 0; color: #333;\">${email}</td>\n              </tr>\n              <tr>\n                <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Plan Type:</td>\n                <td style=\"padding: 8px 0; color: #333; text-transform: capitalize;\">${planType}</td>\n              </tr>\n              <tr>\n                <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Expires:</td>\n                <td style=\"padding: 8px 0; color: #333;\">${expirationDate}</td>\n              </tr>\n              <tr>\n                <td style=\"padding: 8px 0; font-weight: bold; color: #555;\">Created:</td>\n                <td style=\"padding: 8px 0; color: #333;\">${new Date().toLocaleString()}</td>\n              </tr>\n            </table>\n          </div>\n          \n          <p style=\"margin-top: 20px; color: #666; font-size: 12px;\">\n            This is an automated notification from the AlfredFlix account system.\n          </p>\n        </div>\n      `\n    };\n\n    await mg.messages.create(process.env.MAILGUN_DOMAIN, messageData);\n    console.log(`Admin notification sent for new user: ${username}`);\n  } catch (error) {\n    console.error('Failed to send admin notification email:', error);\n  }\n}\n\n// Configure Jellyfin user permissions based on plan type\nasync function configureJellyfinUserPermissions(jellyfinUserId: string, planType: string) {\n  try {\n    const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n    const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n\n    // Get current library structure from Jellyfin\n    let STANDARD_LIBRARIES = [];\n    let PREMIUM_LIBRARIES = [];\n    \n    try {\n      const librariesResponse = await axios.get(`${JELLYFIN_URL}/Library/MediaFolders`, {\n        headers: { 'X-Emby-Token': API_KEY }\n      });\n      \n      const libraries = librariesResponse.data.Items || [];\n      const movieLibs = libraries.filter(lib => lib.CollectionType === 'movies');\n      const tvLibs = libraries.filter(lib => lib.CollectionType === 'tvshows');\n      \n      // Standard gets regular movies and TV\n      STANDARD_LIBRARIES = [\n        ...movieLibs.filter(lib => !lib.Name.toLowerCase().includes('uhd') && !lib.Name.toLowerCase().includes('4k')).map(lib => lib.Id),\n        ...tvLibs.filter(lib => !lib.Name.toLowerCase().includes('uhd') && !lib.Name.toLowerCase().includes('4k')).map(lib => lib.Id)\n      ];\n      \n      // Premium gets all libraries\n      PREMIUM_LIBRARIES = libraries.map(lib => lib.Id);\n      \n      console.log(`Found ${libraries.length} libraries. Standard: ${STANDARD_LIBRARIES.length}, Premium: ${PREMIUM_LIBRARIES.length}`);\n    } catch (error) {\n      console.error('Failed to get library structure, using fallback IDs:', error.message);\n      // Fallback to hardcoded IDs\n      STANDARD_LIBRARIES = [\"f137a2dd21bbc1b99aa5c0f6bf02a805\", \"a656b907eb3a73532e40e44b968d0225\"];\n      PREMIUM_LIBRARIES = [\"f137a2dd21bbc1b99aa5c0f6bf02a805\", \"a656b907eb3a73532e40e44b968d0225\", \"171db634ae2ae313edf438e829876c69\", \"3b37f5f09c7109a66c0e5ba425175e64\"];\n    }\n\n    const enabledFolders = planType === 'premium' ? PREMIUM_LIBRARIES : STANDARD_LIBRARIES;\n\n    // Get current user policy first to avoid validation errors\n    const userResponse = await axios.get(`${JELLYFIN_URL}/Users/${jellyfinUserId}`, {\n      headers: { 'X-Emby-Token': API_KEY }\n    });\n    \n    const currentPolicy = userResponse.data.Policy || {};\n    \n    // Configure comprehensive permissions with all required restrictions\n    const policyUpdate = {\n      ...currentPolicy, // Keep existing policy structure\n      IsAdministrator: false, // UNCHECK: Allow this user to manage the server\n      IsDisabled: false,\n      IsHidden: true, // CHECK: Hide this user from login screens\n      EnabledFolders: enabledFolders, // SPECIFIC folder access\n      EnableAllFolders: false, // CRITICAL: Must be false to enforce restrictions\n      RemoteClientBitrateLimit: planType === 'premium' ? 100000000 : 50000000,\n      MaxActiveSessions: planType === 'premium' ? 4 : 2,\n      LoginAttemptsBeforeLockout: 3, // Failed login tries before user is locked out: 3\n      \n      // UNCHECK all these server management capabilities\n      EnableCollectionManagement: false, // Allow this user to manage collections\n      EnableSubtitleManagement: false, // Allow this user to edit subtitles  \n      EnableLiveTvAccess: false, // Allow Live TV access\n      EnableLiveTvManagement: false, // Allow Live TV recording management\n      \n      // Media playback restrictions - UNCHECK transcoding for Standard users\n      EnableVideoPlaybackTranscoding: false, // UNCHECK: Allow video playback that requires transcoding \n      EnablePlaybackRemuxing: false, // UNCHECK: Allow video playback that requires conversion without re-encoding\n      \n      // UNCHECK remote control capabilities\n      EnableRemoteControlOfOtherUsers: false, // Allow remote control of other users\n      EnableSharedDeviceControl: false // Allow remote control of shared devices\n    };\n\n    // Update user policy\n    await axios.post(`${JELLYFIN_URL}/Users/${jellyfinUserId}/Policy`, policyUpdate, {\n      headers: { \n        'Content-Type': 'application/json',\n        'X-Emby-Token': API_KEY\n      }\n    });\n\n    console.log(`✅ Configured ${planType} permissions for Jellyfin user ${jellyfinUserId}:`);\n    console.log(`   - Libraries: ${enabledFolders.length} accessible`);\n    console.log(`   - Hidden from login: ${policyUpdate.IsHidden}`);\n    console.log(`   - Login attempts limit: ${policyUpdate.LoginAttemptsBeforeLockout}`);\n    console.log(`   - Admin access: ${policyUpdate.IsAdministrator}`);\n    console.log(`   - Transcoding allowed: ${policyUpdate.EnableVideoPlaybackTranscoding}`);\n  } catch (error) {\n    console.error('❌ Failed to configure Jellyfin user permissions:', error);\n    if (error.response) {\n      console.error('   Validation errors:', error.response.data);\n    }\n  }\n}\n\n// Sync account status to Jellyfin (for suspension/activation)\nasync function syncAccountStatusToJellyfin(jellyfinUserId: string, status: string) {\n  try {\n    const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n    const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n\n    const isDisabled = status === 'suspended';\n    \n    // Get current user policy first\n    const userResponse = await axios.get(`${JELLYFIN_URL}/Users/${jellyfinUserId}`, {\n      headers: { 'X-Emby-Token': API_KEY }\n    });\n\n    const currentPolicy = userResponse.data.Policy || {};\n    \n    // Update only the disabled status\n    const policyUpdate = {\n      ...currentPolicy,\n      IsDisabled: isDisabled\n    };\n\n    await axios.post(`${JELLYFIN_URL}/Users/${jellyfinUserId}/Policy`, policyUpdate, {\n      headers: { \n        'Content-Type': 'application/json',\n        'X-Emby-Token': API_KEY\n      }\n    });\n\n    console.log(`✅ Synced account status: ${status} (disabled: ${isDisabled}) for Jellyfin user ${jellyfinUserId}`);\n  } catch (error) {\n    console.error('❌ Failed to sync account status to Jellyfin:', error);\n  }\n}\n\n// Configure passport\npassport.use(new LocalStrategy(async (username, password, done) => {\n  try {\n    const user = await storage.getUserByUsername(username);\n    if (!user) {\n      return done(null, false, { message: 'Invalid username or password' });\n    }\n    \n    // Simple password check (in production, use proper hashing)\n    if (user.password !== password) {\n      return done(null, false, { message: 'Invalid username or password' });\n    }\n    \n    return done(null, user);\n  } catch (error) {\n    return done(error);\n  }\n}));\n\npassport.serializeUser((user: any, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await storage.getUser(id);\n    done(null, user);\n  } catch (error) {\n    done(error);\n  }\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // User registration route with referral support\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      const { referralCode } = req.body;\n\n      // Check if username or email already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ success: false, message: 'Username already exists' });\n      }\n\n      // Generate referral code for new user\n      const userReferralCode = ReferralService.generateReferralCode();\n\n      // Create user\n      const newUser = await storage.createUser({\n        ...validatedData,\n        referralCode: userReferralCode,\n        referredBy: referralCode || null,\n      });\n\n      // Apply referral bonus if referral code provided\n      if (referralCode) {\n        await ReferralService.applyReferral(validatedData.username, referralCode);\n      }\n\n      res.json({ \n        success: true, \n        message: 'User created successfully',\n        user: { \n          id: newUser.id,\n          username: newUser.username,\n          referralCode: userReferralCode\n        }\n      });\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      res.status(400).json({ success: false, message: error.message || 'Registration failed' });\n    }\n  });\n\n  // Authentication routes\n  app.post(\"/api/login\", passport.authenticate('local'), (req, res) => {\n    res.json({ user: req.user, message: 'Login successful' });\n  });\n\n  app.post(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Logout failed' });\n      }\n      res.json({ message: 'Logout successful' });\n    });\n  });\n\n  app.get(\"/api/me\", (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json({ user: req.user });\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  });\n\n  // Contact form submission\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      const validatedData = insertContactMessageSchema.parse(req.body);\n      const message = await storage.createContactMessage(validatedData);\n      \n      // In a real implementation, you might also send an email notification\n      console.log(`📧 New contact message from ${message.email}: ${message.message}`);\n      \n      res.json({ success: true, message: \"Message sent successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Invalid form data\",\n          errors: error.errors \n        });\n      }\n      \n      console.error(\"Contact form error:\", error);\n      res.status(500).json({ \n        success: false, \n        message: \"Failed to send message\" \n      });\n    }\n  });\n\n  // Get contact messages (admin only)\n  app.get(\"/api/admin/contact-messages\", async (req, res) => {\n    try {\n      // In a real implementation, you'd add admin authentication here\n      const messages = await storage.getContactMessages();\n      res.json(messages);\n    } catch (error) {\n      console.error(\"Failed to fetch contact messages:\", error);\n      res.status(500).json({ message: \"Failed to fetch messages\" });\n    }\n  });\n\n  // Admin user management routes - Check if user is logged in via frontend auth\n  app.get(\"/api/admin/users\", async (req, res) => {\n    // For now, allow access if any valid session exists\n    // In a real app, you'd validate the user token from frontend properly\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error('Admin users fetch error:', error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.patch(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      // Get current user to check for changes\n      const currentUser = await storage.getUser(id);\n      if (!currentUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Keep dates as strings for timestamp mode compatibility\n      \n      // Update user in database\n      const user = await storage.updateUser(id, updates);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      \n      // Sync changes to Jellyfin if user has Jellyfin ID\n      if (user.jellyfinUserId) {\n        // Check if status changed and sync to Jellyfin\n        if (updates.status && updates.status !== currentUser.status) {\n          await syncAccountStatusToJellyfin(user.jellyfinUserId, updates.status);\n        }\n        \n        // Check if plan type changed and update permissions\n        if (updates.planType && updates.planType !== currentUser.planType) {\n          await configureJellyfinUserPermissions(user.jellyfinUserId, updates.planType);\n        }\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error('Update user error:', error);\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  app.post(\"/api/admin/create-user\", async (req, res) => {\n    try {\n      const { username, email, password, planType, isAdmin, monthlyPrice } = req.body;\n      \n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n\n      // Create user in AlfredFlix system first with 30-day expiration\n      const expirationDate = new Date();\n      expirationDate.setDate(expirationDate.getDate() + 30);\n      \n      const user = await storage.createUser({\n        username,\n        email,\n        password,\n        planType,\n        monthlyPrice: monthlyPrice || (planType === 'premium' ? '14.99' : '9.99'),\n        isAdmin: isAdmin || false,\n        status: 'active',\n        expiresAt: expirationDate,\n        neverExpires: false\n      });\n\n      // Also create user in Jellyfin server\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      try {\n        // Create user in Jellyfin using the correct endpoint\n        const jellyfinResponse = await axios.post(`${JELLYFIN_URL}/Users/New`, {\n          Name: username,\n          Password: password\n        }, {\n          headers: { \n            'Content-Type': 'application/json',\n            'X-Emby-Token': API_KEY\n          }\n        });\n\n        const jellyfinUser = jellyfinResponse.data;\n        \n        // Update AlfredFlix user with Jellyfin ID\n        const updatedUser = await storage.updateUser(user.id, {\n          jellyfinUserId: jellyfinUser.Id\n        });\n\n        // Configure Jellyfin user permissions based on plan type\n        await configureJellyfinUserPermissions(jellyfinUser.Id, planType);\n\n        // Send welcome email with login details\n        await sendWelcomeEmail(email, username, password, planType);\n        \n        // Send admin notification email\n        await sendAdminNotificationEmail(username, email, updatedUser.expiresAt, planType);\n\n        console.log(`Created user ${username} in both AlfredFlix and Jellyfin (ID: ${jellyfinUser.Id})`);\n        res.json(updatedUser);\n        \n      } catch (jellyfinError) {\n        console.error('Failed to create Jellyfin user:', jellyfinError);\n        // User was created in AlfredFlix but not Jellyfin - still return the user but log the issue\n        console.warn(`User ${username} created in AlfredFlix but not in Jellyfin. Manual sync required.`);\n        res.json(user);\n      }\n\n    } catch (error) {\n      console.error('Create user error:', error);\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.delete(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Get user details before deletion for email notification\n      const user = await storage.getUser(id);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Delete from Jellyfin server if user has Jellyfin ID\n      if (user.jellyfinUserId) {\n        try {\n          const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n          const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n          \n          await axios.delete(`${JELLYFIN_URL}/Users/${user.jellyfinUserId}`, {\n            headers: { \n              'X-Emby-Token': API_KEY,\n              'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix-Admin\", Device=\"Web Browser\", DeviceId=\"alfredflix-admin\", Version=\"1.0.0\"'\n            }\n          });\n          console.log(`Deleted user ${user.username} from Jellyfin (ID: ${user.jellyfinUserId})`);\n        } catch (jellyfinError) {\n          console.error('Failed to delete user from Jellyfin:', jellyfinError);\n          // Continue with AlfredFlix deletion even if Jellyfin deletion fails\n        }\n      }\n\n      // Delete from AlfredFlix database\n      await storage.deleteUser(id);\n\n      // Send account deletion email\n      await sendAccountDeletionEmail(user.email, user.username);\n\n      res.json({ success: true, message: \"User deleted successfully from both systems\" });\n    } catch (error) {\n      console.error('Delete user error:', error);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  app.get(\"/api/admin/jellyfin-users\", async (req, res) => {\n    try {\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      const response = await axios.get(`${JELLYFIN_URL}/Users`, {\n        headers: { \n          'X-Emby-Token': API_KEY,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix-Admin\", Device=\"Web Browser\", DeviceId=\"alfredflix-admin\", Version=\"1.0.0\"'\n        }\n      });\n\n      const jellyfinUsers = response.data.map((user: any) => ({\n        id: user.Id,\n        name: user.Name,\n        hasPassword: user.HasPassword,\n        lastLoginDate: user.LastLoginDate,\n        lastActivityDate: user.LastActivityDate,\n        isAdmin: user.Policy?.IsAdministrator || false,\n        isDisabled: user.Policy?.IsDisabled || false\n      }));\n\n      res.json(jellyfinUsers);\n    } catch (error) {\n      console.error('Failed to fetch Jellyfin users:', error);\n      res.status(500).json({ error: \"Failed to fetch Jellyfin users\" });\n    }\n  });\n\n  app.post(\"/api/admin/import-user\", async (req, res) => {\n    try {\n      const { id, name, planType } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(name);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists in AlfredFlix\" });\n      }\n\n      const user = await storage.createUser({\n        username: name,\n        email: `${name}@alfredflix.com`,\n        password: 'temp_password_' + Math.random().toString(36).substring(7),\n        planType: planType\n      });\n\n      // Update with Jellyfin user ID\n      const updatedUser = await storage.updateUser(user.id, {\n        jellyfinUserId: id\n      });\n\n      res.json(updatedUser);\n    } catch (error) {\n      console.error('Import user error:', error);\n      res.status(500).json({ error: \"Failed to import user\" });\n    }\n  });\n\n  // Configure user permissions based on plan type\n  app.patch(\"/api/admin/jellyfin-user/:userId/permissions\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { userId } = req.params;\n      const { planType } = req.body;\n      \n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      // Get current user data to preserve some settings\n      const userResponse = await axios.get(`${JELLYFIN_URL}/Users/${userId}`, {\n        headers: { 'X-Emby-Token': API_KEY }\n      });\n      \n      const currentUser = userResponse.data;\n      \n      // Define permission sets based on plan type\n      const standardPermissions = {\n        IsAdministrator: false,\n        IsHidden: true,\n        IsDisabled: false,\n        EnableRemoteAccess: true,\n        EnableLiveTvAccess: false,\n        EnableLiveTvManagement: false,\n        EnableMediaPlayback: true,\n        EnableAudioPlaybackTranscoding: true,\n        EnableVideoPlaybackTranscoding: false,\n        EnablePlaybackRemuxing: false,\n        EnableContentDeletion: false,\n        EnableContentDownloading: true,\n        EnableSyncTranscoding: true,\n        RemoteClientBitrateLimit: 50000000, // 50 Mbps\n        MaxActiveSessions: 2,\n        LoginAttemptsBeforeLockout: 3,\n        EnabledFolders: [\n          \"f137a2dd21bbc1b99aa5c0f6bf02a805\", // Movies\n          \"a656b907eb3a73532e40e44b968d0225\"  // Shows\n        ],\n        EnableAllFolders: false,\n        SyncPlayAccess: \"JoinGroups\",\n        AuthenticationProviderId: currentUser.Policy.AuthenticationProviderId,\n        PasswordResetProviderId: currentUser.Policy.PasswordResetProviderId\n      };\n\n      const premiumPermissions = {\n        IsAdministrator: false,\n        IsHidden: true,\n        IsDisabled: false,\n        EnableRemoteAccess: true,\n        EnableLiveTvAccess: false,\n        EnableLiveTvManagement: false,\n        EnableMediaPlayback: true,\n        EnableAudioPlaybackTranscoding: true,\n        EnableVideoPlaybackTranscoding: false,\n        EnablePlaybackRemuxing: false,\n        EnableContentDeletion: false,\n        EnableContentDownloading: true,\n        EnableSyncTranscoding: true,\n        RemoteClientBitrateLimit: 100000000, // 100 Mbps\n        MaxActiveSessions: 4,\n        LoginAttemptsBeforeLockout: 3,\n        EnabledFolders: [\n          \"f137a2dd21bbc1b99aa5c0f6bf02a805\", // Movies\n          \"a656b907eb3a73532e40e44b968d0225\", // Shows\n          \"171db634ae2ae313edf438e829876c69\", // UHD Movies\n          \"3b37f5f09c7109a66c0e5ba425175e64\"  // UHD Shows\n        ],\n        EnableAllFolders: false,\n        SyncPlayAccess: \"JoinGroups\",\n        AuthenticationProviderId: currentUser.Policy.AuthenticationProviderId,\n        PasswordResetProviderId: currentUser.Policy.PasswordResetProviderId\n      };\n\n      const permissions = planType === 'premium' ? premiumPermissions : standardPermissions;\n      \n      // Update user policy\n      await axios.post(`${JELLYFIN_URL}/Users/${userId}/Policy`, permissions, {\n        headers: { \n          'X-Emby-Token': API_KEY,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      res.json({ success: true, message: `User permissions updated for ${planType} plan` });\n    } catch (error) {\n      console.error('Failed to update user permissions:', error);\n      res.status(500).json({ error: \"Failed to update user permissions\" });\n    }\n  });\n\n  // Get Jellyfin libraries for access management\n  app.get(\"/api/admin/jellyfin-libraries\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      const response = await axios.get(`${JELLYFIN_URL}/Library/VirtualFolders`, {\n        headers: { \n          'X-Emby-Token': API_KEY,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix-Admin\", Device=\"Web Browser\", DeviceId=\"alfredflix-admin\", Version=\"1.0.0\"'\n        }\n      });\n\n      const libraries = response.data.map((library: any) => ({\n        id: library.ItemId,\n        name: library.Name,\n        collectionType: library.CollectionType\n      }));\n\n      res.json(libraries);\n    } catch (error) {\n      console.error('Failed to fetch libraries:', error);\n      res.status(500).json({ error: \"Failed to fetch libraries\" });\n    }\n  });\n\n  // Get available permission options for user configuration\n  app.get(\"/api/admin/permission-options\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      // Get libraries for folder selection\n      const librariesResponse = await axios.get(`${JELLYFIN_URL}/Library/VirtualFolders`, {\n        headers: { 'X-Emby-Token': API_KEY }\n      });\n\n      const libraries = librariesResponse.data.map((lib: any) => ({\n        id: lib.ItemId,\n        name: lib.Name,\n        collectionType: lib.CollectionType\n      }));\n\n      // Define configurable permission options\n      const permissionOptions = {\n        access: {\n          enableRemoteAccess: { name: \"Remote Access\", description: \"Allow access from outside network\" },\n          enableLiveTvAccess: { name: \"Live TV Access\", description: \"Access to live TV features\" },\n          enableLiveTvManagement: { name: \"Live TV Management\", description: \"Manage live TV settings\" }\n        },\n        playback: {\n          enableMediaPlayback: { name: \"Media Playback\", description: \"Basic media playback\" },\n          enableAudioPlaybackTranscoding: { name: \"Audio Transcoding\", description: \"Transcode audio files\" },\n          enableVideoPlaybackTranscoding: { name: \"Video Transcoding\", description: \"Transcode video files\" },\n          enablePlaybackRemuxing: { name: \"Playback Remuxing\", description: \"Remux media files\" }\n        },\n        content: {\n          enableContentDeletion: { name: \"Content Deletion\", description: \"Delete media files\" },\n          enableContentDownloading: { name: \"Content Downloading\", description: \"Download content for offline use\" },\n          enableSyncTranscoding: { name: \"Sync Transcoding\", description: \"Transcode for sync\" }\n        },\n        streaming: {\n          remoteClientBitrateLimit: { \n            name: \"Max Streaming Bitrate\", \n            description: \"Maximum streaming bitrate (Mbps)\",\n            type: \"number\",\n            options: [\n              { value: 1000000, label: \"1 Mbps\" },\n              { value: 2000000, label: \"2 Mbps\" },\n              { value: 4000000, label: \"4 Mbps\" },\n              { value: 8000000, label: \"8 Mbps\" },\n              { value: 15000000, label: \"15 Mbps\" },\n              { value: 25000000, label: \"25 Mbps\" },\n              { value: 50000000, label: \"50 Mbps\" },\n              { value: 0, label: \"No Limit\" }\n            ]\n          },\n          maxActiveSessions: {\n            name: \"Max Concurrent Sessions\",\n            description: \"Maximum simultaneous streams\",\n            type: \"number\",\n            options: [\n              { value: 1, label: \"1 session\" },\n              { value: 2, label: \"2 sessions\" },\n              { value: 3, label: \"3 sessions\" },\n              { value: 5, label: \"5 sessions\" },\n              { value: 0, label: \"Unlimited\" }\n            ]\n          }\n        },\n        libraries: {\n          enabledFolders: {\n            name: \"Library Access\",\n            description: \"Which libraries user can access\",\n            type: \"multiselect\",\n            options: libraries\n          },\n          enableAllFolders: { name: \"Access All Libraries\", description: \"Grant access to all current and future libraries\" }\n        }\n      };\n\n      res.json(permissionOptions);\n    } catch (error) {\n      console.error('Failed to get permission options:', error);\n      res.status(500).json({ error: \"Failed to get permission options\" });\n    }\n  });\n\n  // Create new Jellyfin user\n  app.post(\"/api/admin/create-jellyfin-user\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { username, password, planType } = req.body;\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      // Create user in Jellyfin with required fields\n      const createResponse = await axios.post(`${JELLYFIN_URL}/Users/New`, {\n        Name: username,\n        Password: password,\n        PasswordResetProviderId: 'Jellyfin.Server.Implementations.Users.DefaultPasswordResetProvider',\n        AuthenticationProviderId: 'Jellyfin.Server.Implementations.Users.DefaultAuthenticationProvider'\n      }, {\n        headers: { \n          'X-Emby-Token': API_KEY,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      const newUserId = createResponse.data.Id;\n      \n      // Set user policy based on plan type\n      const isStandard = planType === 'standard';\n      const policy = {\n        IsAdministrator: false,\n        IsHidden: false,\n        IsDisabled: false,\n        EnableRemoteAccess: true,\n        EnableLiveTvAccess: true,\n        EnableLiveTvManagement: false,\n        EnableMediaPlayback: true,\n        EnableAudioPlaybackTranscoding: true,\n        EnableVideoPlaybackTranscoding: true,\n        EnablePlaybackRemuxing: true,\n        EnableContentDeletion: false,\n        EnableContentDownloading: true,\n        EnableSyncTranscoding: true,\n        EnableMediaConversion: false,\n        EnableAllDevices: true,\n        EnableAllChannels: true,\n        EnableAllFolders: !isStandard, // Standard users get restricted folders\n        RemoteClientBitrateLimit: isStandard ? 15000000 : 50000000, // 15Mbps for standard, 50Mbps for premium\n        EnablePublicSharing: false,\n        InvalidLoginAttemptCount: 0,\n        LoginAttemptsBeforeLockout: 3,\n        MaxActiveSessions: isStandard ? 1 : 3\n      };\n\n      await axios.post(`${JELLYFIN_URL}/Users/${newUserId}/Policy`, policy, {\n        headers: { \n          'X-Emby-Token': API_KEY,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Also create in AlfredFlix database\n      const alfredUser = await storage.createUser({\n        username,\n        password,\n        email: `${username}@alfredflix.com`,\n        planType\n      });\n\n      await storage.updateUser(alfredUser.id, {\n        jellyfinUserId: newUserId\n      });\n\n      res.json({ success: true, jellyfinId: newUserId, alfredUserId: alfredUser.id });\n    } catch (error: any) {\n      console.error('Failed to create Jellyfin user:', error.response?.data || error.message);\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  // Make Jellyfin user admin\n  app.post(\"/api/admin/make-jellyfin-admin\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { userId } = req.body;\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      // Get current user\n      const userResponse = await axios.get(`${JELLYFIN_URL}/Users/${userId}`, {\n        headers: { 'X-Emby-Token': API_KEY }\n      });\n\n      const user = userResponse.data;\n      \n      // Update policy to make admin\n      const adminPolicy = {\n        ...user.Policy,\n        IsAdministrator: true,\n        EnableRemoteAccess: true,\n        EnableLiveTvManagement: true,\n        EnableContentDeletion: true,\n        EnableAllFolders: true,\n        RemoteClientBitrateLimit: 0, // No limit for admins\n        MaxActiveSessions: 0 // No limit\n      };\n\n      await axios.post(`${JELLYFIN_URL}/Users/${userId}/Policy`, adminPolicy, {\n        headers: { \n          'X-Emby-Token': API_KEY,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      res.json({ success: true, message: \"User made admin successfully\" });\n    } catch (error: any) {\n      console.error('Failed to make user admin:', error.response?.data || error.message);\n      res.status(500).json({ error: \"Failed to update user permissions\" });\n    }\n  });\n\n  // Delete Jellyfin user\n  app.delete(\"/api/admin/jellyfin-user/:userId\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { userId } = req.params;\n      const JELLYFIN_URL = 'https://watch.alfredflix.stream';\n      const API_KEY = 'f885d4ec4e7e491bb578e0980528dd08';\n      \n      await axios.delete(`${JELLYFIN_URL}/Users/${userId}`, {\n        headers: { 'X-Emby-Token': API_KEY }\n      });\n\n      res.json({ success: true, message: \"User deleted successfully\" });\n    } catch (error: any) {\n      console.error('Failed to delete user:', error.response?.data || error.message);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Validate referral code endpoint\n  app.post(\"/api/validate-referral\", async (req, res) => {\n    try {\n      const { referralCode } = req.body;\n      \n      if (!referralCode) {\n        return res.json({ valid: false, message: \"Referral code required\" });\n      }\n      \n      // Check if referral user exists\n      const referralUser = await storage.getUserByUsername(referralCode);\n      if (!referralUser) {\n        return res.json({ valid: false, message: \"Invalid referral code\" });\n      }\n      \n      res.json({ valid: true, message: \"Valid referral code - $1 first month!\" });\n    } catch (error) {\n      console.error('Referral validation error:', error);\n      res.json({ valid: false, message: \"Validation failed\" });\n    }\n  });\n\n  // Validate coupon code endpoint\n  app.post(\"/api/validate-coupon\", async (req, res) => {\n    try {\n      const { coupon } = req.body;\n      \n      if (!coupon) {\n        return res.json({ valid: false, message: \"Coupon code required\" });\n      }\n      \n      // Check in our database first\n      const localCoupon = await storage.getCouponByCode(coupon);\n      if (localCoupon) {\n        if (!localCoupon.isActive) {\n          return res.json({ valid: false, message: \"Coupon expired or deactivated\" });\n        }\n        \n        if (localCoupon.expiresAt && new Date(localCoupon.expiresAt) < new Date()) {\n          return res.json({ valid: false, message: \"Coupon expired\" });\n        }\n        \n        if (localCoupon.maxUses && parseInt(localCoupon.currentUses || \"0\") >= parseInt(localCoupon.maxUses)) {\n          return res.json({ valid: false, message: \"Coupon usage limit reached\" });\n        }\n        \n        let discountText = \"\";\n        let discount = {};\n        \n        if (localCoupon.discountType === 'percent') {\n          discountText = `${localCoupon.discountValue}% off`;\n          discount = { percent_off: parseFloat(localCoupon.discountValue) };\n        } else if (localCoupon.discountType === 'amount') {\n          discountText = `$${localCoupon.discountValue} off`;\n          discount = { amount_off: parseFloat(localCoupon.discountValue) * 100 }; // Convert to cents\n        } else if (localCoupon.discountType === 'free_month') {\n          discountText = \"Free first month\";\n          discount = { percent_off: 100 };\n        }\n        \n        return res.json({ \n          valid: true, \n          message: `Valid coupon - ${discountText}!`,\n          discount\n        });\n      }\n      \n      // Fallback to Stripe validation for backwards compatibility\n      try {\n        const couponData = await stripe.coupons.retrieve(coupon);\n        if (!couponData.valid) {\n          return res.json({ valid: false, message: \"Coupon expired or invalid\" });\n        }\n        \n        const discountText = couponData.percent_off \n          ? `${couponData.percent_off}% off`\n          : `$${(couponData.amount_off! / 100).toFixed(2)} off`;\n          \n        res.json({ \n          valid: true, \n          message: `Valid coupon - ${discountText}!`,\n          discount: {\n            percent_off: couponData.percent_off,\n            amount_off: couponData.amount_off\n          }\n        });\n      } catch (stripeError) {\n        res.json({ valid: false, message: \"Invalid coupon code\" });\n      }\n    } catch (error) {\n      console.error('Coupon validation error:', error);\n      res.json({ valid: false, message: \"Validation failed\" });\n    }\n  });\n\n  // Jellyfin proxy endpoints (to handle CORS and authentication)\n  app.get(\"/api/jellyfin/*\", (req, res) => {\n    // In a real implementation, you might proxy requests to Jellyfin\n    // to handle CORS issues or add additional authentication/authorization\n    res.status(501).json({ message: \"Jellyfin proxy not implemented\" });\n  });\n\n  // TMDB proxy endpoints\n  app.get(\"/api/tmdb/*\", (req, res) => {\n    // In a real implementation, you might proxy TMDB requests\n    // to keep API keys server-side\n    res.status(501).json({ message: \"TMDB proxy not implemented\" });\n  });\n\n  // Jellyseerr proxy endpoints\n  app.post(\"/api/request/*\", (req, res) => {\n    // In a real implementation, you'd proxy content requests to Jellyseerr\n    res.status(501).json({ message: \"Jellyseerr proxy not implemented\" });\n  });\n\n  // Placeholder image endpoint\n  app.get(\"/api/placeholder/:width/:height\", (req, res) => {\n    const { width, height } = req.params;\n    // Return a simple SVG placeholder\n    const svg = `\n      <svg width=\"${width}\" height=\"${height}\" xmlns=\"http://www.w3.org/2000/svg\">\n        <rect width=\"100%\" height=\"100%\" fill=\"#27272a\"/>\n        <text x=\"50%\" y=\"50%\" font-family=\"Arial\" font-size=\"16\" fill=\"#71717a\" text-anchor=\"middle\" dy=\".3em\">\n          ${width}×${height}\n        </text>\n      </svg>\n    `;\n    \n    res.setHeader('Content-Type', 'image/svg+xml');\n    res.send(svg);\n  });\n\n  // Stripe payment endpoints\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      const { amount } = req.body;\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert to cents\n        currency: \"usd\",\n      });\n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      res\n        .status(500)\n        .json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/create-subscription\", async (req, res) => {\n    try {\n      const { plan, referralCode, couponCode } = req.body;\n      let amount = plan === 'premium' ? 1499 : 999; // $14.99 or $9.99 in cents\n      let appliedDiscount = '';\n      \n      // Apply referral discount (highest priority - $1 first month)\n      if (referralCode) {\n        const referralUser = await storage.getUserByUsername(referralCode);\n        if (referralUser) {\n          amount = 100; // $1.00 in cents\n          appliedDiscount = 'referral';\n        }\n      }\n      \n      // Apply coupon discount if no referral\n      if (!appliedDiscount && couponCode) {\n        const coupon = await storage.getCouponByCode(couponCode);\n        if (coupon && coupon.isActive) {\n          if (coupon.discountType === 'percent') {\n            const discountAmount = amount * (parseFloat(coupon.discountValue) / 100);\n            amount = Math.max(100, amount - discountAmount); // Minimum $1\n            appliedDiscount = 'coupon_percent';\n          } else if (coupon.discountType === 'amount') {\n            const discountAmount = parseFloat(coupon.discountValue) * 100; // Convert to cents\n            amount = Math.max(100, amount - discountAmount); // Minimum $1\n            appliedDiscount = 'coupon_amount';\n          } else if (coupon.discountType === 'free_month') {\n            amount = 0; // Free first month\n            appliedDiscount = 'coupon_free';\n          }\n        }\n      }\n      \n      const metadata: any = { \n        plan: plan || 'standard', \n        type: 'subscription',\n        appliedDiscount,\n        referralCode: referralCode || '',\n        couponCode: couponCode || ''\n      };\n      \n      // Create payment intent with calculated amount\n      const paymentIntentData: any = {\n        amount,\n        currency: \"usd\",\n        metadata,\n        automatic_payment_methods: {\n          enabled: true,\n        }\n      };\n      \n      const paymentIntent = await stripe.paymentIntents.create(paymentIntentData);\n      \n      res.json({ clientSecret: paymentIntent.client_secret });\n    } catch (error: any) {\n      console.error('Stripe payment intent error:', error);\n      res\n        .status(500)\n        .json({ message: \"Error creating subscription: \" + error.message });\n    }\n  });\n\n  // Complete signup after successful payment\n  app.post(\"/api/complete-signup\", async (req, res) => {\n    try {\n      const { username, email, password, planType, referralCode, couponCode, paymentIntentId } = req.body;\n      \n      if (!paymentIntentId) {\n        return res.status(400).json({ error: \"Payment intent ID required\" });\n      }\n      \n      // Verify payment was successful\n      const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n      if (paymentIntent.status !== 'succeeded') {\n        return res.status(400).json({ error: \"Payment not completed\" });\n      }\n      \n      // Check if user already exists (prevent duplicate accounts)\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n      \n      // Create user account now that payment is confirmed\n      const insertUser: any = { username, email, password, planType };\n      console.log('Creating user with data:', insertUser);\n      const newUser = await storage.createUser(insertUser);\n      console.log('User created successfully:', newUser.id);\n      \n      // Process referral and coupon usage tracking\n      if (referralCode) {\n        const referralUser = await storage.getUserByUsername(referralCode);\n        if (referralUser) {\n          // Process referral through referral service\n          const referralService = new ReferralService();\n          await referralService.processReferral(referralUser.id, newUser.id);\n        }\n      }\n      \n      // Increment coupon usage if applicable\n      if (couponCode) {\n        const coupon = await storage.getCouponByCode(couponCode);\n        if (coupon) {\n          await storage.incrementCouponUse(coupon.id);\n        }\n      }\n      \n      res.json({ success: true, message: \"Account created successfully\", user: newUser });\n    } catch (error: any) {\n      console.error('Complete signup error:', error);\n      res.status(500).json({ error: \"Failed to complete signup: \" + error.message });\n    }\n  });\n\n  // Bulk extend expiration dates for all active users\n  app.post(\"/api/admin/bulk-extend-expiration\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { days } = req.body;\n      const daysToAdd = parseInt(days) || 0;\n      \n      if (daysToAdd <= 0) {\n        return res.status(400).json({ error: \"Days must be a positive number\" });\n      }\n\n      // Get all active users that are not set to never expire\n      const users = await storage.getAllUsers();\n      const activeUsers = users.filter(u => u.status === 'active' && !u.neverExpires);\n      \n      let updatedCount = 0;\n      for (const user of activeUsers) {\n        const currentExpiration = user.expiresAt || new Date();\n        const newExpiration = new Date(currentExpiration);\n        newExpiration.setDate(newExpiration.getDate() + daysToAdd);\n        \n        await storage.updateUser(user.id, { expiresAt: newExpiration });\n        updatedCount++;\n      }\n\n      res.json({ \n        success: true, \n        message: `Extended expiration for ${updatedCount} active users by ${daysToAdd} days`,\n        updatedCount \n      });\n    } catch (error) {\n      console.error('Bulk extend expiration error:', error);\n      res.status(500).json({ error: \"Failed to extend expiration dates\" });\n    }\n  });\n\n  // Coupon management endpoints\n  app.get(\"/api/admin/coupons\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const coupons = await storage.getAllCoupons();\n      res.json(coupons);\n    } catch (error) {\n      console.error('Get coupons error:', error);\n      res.status(500).json({ error: \"Failed to fetch coupons\" });\n    }\n  });\n\n  app.post(\"/api/admin/coupons\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const couponData = {\n        ...req.body,\n        createdBy: req.user.id\n      };\n      \n      const coupon = await storage.createCoupon(couponData);\n      res.json(coupon);\n    } catch (error) {\n      console.error('Create coupon error:', error);\n      res.status(500).json({ error: \"Failed to create coupon\" });\n    }\n  });\n\n  app.put(\"/api/admin/coupons/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { id } = req.params;\n      const coupon = await storage.updateCoupon(id, req.body);\n      res.json(coupon);\n    } catch (error) {\n      console.error('Update coupon error:', error);\n      res.status(500).json({ error: \"Failed to update coupon\" });\n    }\n  });\n\n  app.delete(\"/api/admin/coupons/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      const { id } = req.params;\n      await storage.deleteCoupon(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Delete coupon error:', error);\n      res.status(500).json({ error: \"Failed to delete coupon\" });\n    }\n  });\n\n  // Process monthly renewals (extend by 30 days for paid users)\n  app.post(\"/api/admin/process-renewals\", async (req, res) => {\n    if (!req.isAuthenticated() || !req.user?.isAdmin) {\n      return res.status(403).json({ error: \"Admin access required\" });\n    }\n    \n    try {\n      // This would typically be called by a payment webhook or scheduled job\n      // For now, it's a manual admin function\n      const users = await storage.getAllUsers();\n      const activeUsers = users.filter(u => u.status === 'active' && !u.neverExpires);\n      \n      let renewedCount = 0;\n      for (const user of activeUsers) {\n        // In a real system, you'd check if payment was successful\n        // For now, we'll extend all active users by 30 days\n        const currentExpiration = user.expiresAt || new Date();\n        const newExpiration = new Date(currentExpiration);\n        newExpiration.setDate(newExpiration.getDate() + 30);\n        \n        await storage.updateUser(user.id, { expiresAt: newExpiration });\n        renewedCount++;\n      }\n\n      res.json({ \n        success: true, \n        message: `Renewed ${renewedCount} user subscriptions for 30 days`,\n        renewedCount \n      });\n    } catch (error) {\n      console.error('Process renewals error:', error);\n      res.status(500).json({ error: \"Failed to process renewals\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":52873},"server/storage.ts":{"content":"import { type User, type InsertUser, type ContactMessage, type InsertContactMessage, type Coupon, type InsertCoupon, users, contactMessages, coupons } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n  getAllUsers(): Promise<User[]>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  updateStripeCustomerId(id: string, customerId: string): Promise<User>;\n  updateUserStripeInfo(id: string, info: { customerId: string; subscriptionId: string }): Promise<User>;\n  updateReferralCredits(id: string, credits: string): Promise<User>;\n  setReferralCode(id: string, code: string): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  \n  // Coupon management\n  createCoupon(coupon: InsertCoupon & { createdBy: string }): Promise<Coupon>;\n  getAllCoupons(): Promise<Coupon[]>;\n  getCouponByCode(code: string): Promise<Coupon | undefined>;\n  updateCoupon(id: string, updates: Partial<Coupon>): Promise<Coupon>;\n  deleteCoupon(id: string): Promise<void>;\n  incrementCouponUse(id: string): Promise<Coupon>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contactMessages: Map<string, ContactMessage>;\n  private coupons: Map<string, Coupon>;\n\n  constructor() {\n    this.users = new Map();\n    this.contactMessages = new Map();\n    this.coupons = new Map();\n    \n    // Create default admin user for testing\n    this.createAdminUser();\n  }\n\n  private async createAdminUser() {\n    const adminId = 'admin-user-id';\n    const adminUser: User = {\n      id: adminId,\n      username: 'admin',\n      password: 'admin123',\n      email: 'admin@alfredflix.com',\n      planType: 'premium',\n      monthlyPrice: '14.99',\n      status: 'active',\n      isAdmin: true,\n      createdAt: new Date(),\n      jellyfinUserId: null,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      expiresAt: null\n    };\n    this.users.set(adminId, adminUser);\n\n    // Create srvadmin user in AlfredFlix system\n    const srvadminId = 'srvadmin-user-id';\n    const srvadminUser: User = {\n      id: srvadminId,\n      username: 'srvadmin',\n      password: 'admin123', // You can change this\n      email: 'srvadmin@alfredflix.com',\n      planType: 'premium',\n      monthlyPrice: '14.99',\n      status: 'active',\n      isAdmin: true,\n      createdAt: new Date(),\n      jellyfinUserId: '2bfcb58e3dce4812ad2a96657a53d597', // Real Jellyfin ID from API response\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      expiresAt: null\n    };\n    this.users.set(srvadminId, srvadminUser);\n\n    // Create demo users in AlfredFlix system\n    const stddemoId = 'stddemo-user-id';\n    const stddemoUser: User = {\n      id: stddemoId,\n      username: 'stddemo',\n      password: '12345',\n      email: 'stddemo@alfredflix.com',\n      planType: 'standard',\n      monthlyPrice: '9.99',\n      status: 'active',\n      isAdmin: false,\n      createdAt: new Date(),\n      jellyfinUserId: 'c435ec8aa9e34d3995864085d73230c4',\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      expiresAt: null\n    };\n    this.users.set(stddemoId, stddemoUser);\n\n    const premdemoId = 'premdemo-user-id';\n    const premdemoUser: User = {\n      id: premdemoId,\n      username: 'premdemo',\n      password: '12345',\n      email: 'premdemo@alfredflix.com',\n      planType: 'premium',\n      monthlyPrice: '14.99',\n      status: 'active',\n      isAdmin: false,\n      createdAt: new Date(),\n      jellyfinUserId: 'b017ae7d38824abd95d71d183a03b0fc',\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      expiresAt: null\n    };\n    this.users.set(premdemoId, premdemoUser);\n\n    // Create master admin user\n    const masteradmId = 'masteradm-user-id';\n    const masteradmUser: User = {\n      id: masteradmId,\n      username: 'masteradm',\n      password: 'MasterPlan6172',\n      email: 'masteradm@alfredflix.com',\n      planType: 'premium',\n      monthlyPrice: '14.99',\n      status: 'active',\n      isAdmin: true,\n      createdAt: new Date(),\n      jellyfinUserId: '500716705ea1402e81d5a5c946aefe67', // Real Jellyfin ID\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      expiresAt: null\n    };\n    this.users.set(masteradmId, masteradmUser);\n    \n    // Create test coupons\n    this.createTestCoupons();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      planType: insertUser.planType || 'standard',\n      status: insertUser.status || 'active',\n      isAdmin: insertUser.isAdmin || false,\n      createdAt: new Date(),\n      jellyfinUserId: null,\n      stripeCustomerId: null,\n      stripeSubscriptionId: null,\n      expiresAt: null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = {\n      ...insertMessage,\n      id,\n      phone: insertMessage.phone || null,\n      status: 'new',\n      createdAt: new Date()\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values()).sort(\n      (a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0)\n    );\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values()).sort(\n      (a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0)\n    );\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const existing = this.users.get(id);\n    if (!existing) throw new Error('User not found');\n    \n    const updated = { ...existing, ...updates };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  async updateStripeCustomerId(id: string, customerId: string): Promise<User> {\n    return this.updateUser(id, { stripeCustomerId: customerId });\n  }\n\n  async updateUserStripeInfo(id: string, info: { customerId: string; subscriptionId: string }): Promise<User> {\n    return this.updateUser(id, { \n      stripeCustomerId: info.customerId, \n      stripeSubscriptionId: info.subscriptionId \n    });\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    const exists = this.users.has(id);\n    if (!exists) throw new Error('User not found');\n    this.users.delete(id);\n  }\n\n  // Coupon management methods\n  async createCoupon(couponData: InsertCoupon & { createdBy: string }): Promise<Coupon> {\n    const id = randomUUID();\n    const coupon: Coupon = {\n      id,\n      ...couponData,\n      currentUses: \"0\",\n      createdAt: new Date(),\n    };\n    this.coupons.set(id, coupon);\n    return coupon;\n  }\n\n  async getAllCoupons(): Promise<Coupon[]> {\n    return Array.from(this.coupons.values());\n  }\n\n  async getCouponByCode(code: string): Promise<Coupon | undefined> {\n    return Array.from(this.coupons.values()).find(c => c.code === code);\n  }\n\n  async updateCoupon(id: string, updates: Partial<Coupon>): Promise<Coupon> {\n    const coupon = this.coupons.get(id);\n    if (!coupon) throw new Error(\"Coupon not found\");\n    \n    const updated = { ...coupon, ...updates };\n    this.coupons.set(id, updated);\n    return updated;\n  }\n\n  async deleteCoupon(id: string): Promise<void> {\n    this.coupons.delete(id);\n  }\n\n  async incrementCouponUse(id: string): Promise<Coupon> {\n    const coupon = this.coupons.get(id);\n    if (!coupon) throw new Error(\"Coupon not found\");\n    \n    const currentUses = parseInt(coupon.currentUses || \"0\");\n    coupon.currentUses = (currentUses + 1).toString();\n    this.coupons.set(id, coupon);\n    return coupon;\n  }\n\n  private async createTestCoupons() {\n    // Create demo coupons for testing\n    const testCoupons = [\n      {\n        id: randomUUID(),\n        code: 'DEMO10',\n        name: '10% Off Demo',\n        discountType: 'percent',\n        discountValue: '10',\n        isActive: true,\n        oneTimeUse: false,\n        newAccountsOnly: false,\n        maxUses: null,\n        currentUses: '0',\n        expiresAt: null,\n        createdAt: new Date(),\n        createdBy: 'masteradm-user-id'\n      },\n      {\n        id: randomUUID(),\n        code: 'SAVE5',\n        name: '$5 Off Coupon',\n        discountType: 'amount',\n        discountValue: '5.00',\n        isActive: true,\n        oneTimeUse: false,\n        newAccountsOnly: true,\n        maxUses: '100',\n        currentUses: '0',\n        expiresAt: null,\n        createdAt: new Date(),\n        createdBy: 'masteradm-user-id'\n      },\n      {\n        id: randomUUID(),\n        code: 'FREEMONTH',\n        name: 'Free First Month',\n        discountType: 'free_month',\n        discountValue: '0',\n        isActive: true,\n        oneTimeUse: true,\n        newAccountsOnly: true,\n        maxUses: '10',\n        currentUses: '0',\n        expiresAt: null,\n        createdAt: new Date(),\n        createdBy: 'masteradm-user-id'\n      }\n    ];\n    \n    testCoupons.forEach(coupon => {\n      this.coupons.set(coupon.id, coupon as Coupon);\n    });\n  }\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        id: randomUUID(),\n        createdAt: new Date()\n      })\n      .returning();\n    return user;\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const [message] = await db\n      .insert(contactMessages)\n      .values({\n        ...insertMessage,\n        id: randomUUID(),\n        createdAt: new Date()\n      })\n      .returning();\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return db.select().from(contactMessages);\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return db.select().from(users);\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    // Keep string format for timestamp fields to avoid conversion issues\n    const processedUpdates = { ...updates };\n    \n    const [user] = await db\n      .update(users)\n      .set(processedUpdates)\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error('User not found');\n    return user;\n  }\n\n  async updateStripeCustomerId(id: string, customerId: string): Promise<User> {\n    return this.updateUser(id, { stripeCustomerId: customerId });\n  }\n\n  async updateUserStripeInfo(id: string, info: { customerId: string; subscriptionId: string }): Promise<User> {\n    return this.updateUser(id, { \n      stripeCustomerId: info.customerId, \n      stripeSubscriptionId: info.subscriptionId \n    });\n  }\n\n  async updateReferralCredits(id: string, credits: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ referralCredits: credits })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error('User not found');\n    return user;\n  }\n\n  async setReferralCode(id: string, code: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ referralCode: code })\n      .where(eq(users.id, id))\n      .returning();\n    if (!user) throw new Error('User not found');\n    return user;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    const result = await db.delete(users).where(eq(users.id, id));\n    if (!result.rowCount) throw new Error('User not found');\n  }\n}\n\n// Initialize database and populate with initial users if empty\nasync function initializeDatabase() {\n  try {\n    const existingUsers = await db.select().from(users);\n    \n    if (existingUsers.length === 0) {\n      console.log('Initializing database with default users...');\n      \n      // Create default admin users\n      const defaultUsers = [\n        {\n          id: 'admin-user-id',\n          username: 'admin',\n          password: 'admin123',\n          email: 'admin@alfredflix.com',\n          planType: 'premium',\n          monthlyPrice: '14.99',\n          status: 'active',\n          isAdmin: true,\n        },\n        {\n          id: 'srvadmin-user-id',\n          username: 'srvadmin',\n          password: 'admin123',\n          email: 'srvadmin@alfredflix.com',\n          planType: 'premium',\n          monthlyPrice: '14.99',\n          status: 'active',\n          isAdmin: true,\n          jellyfinUserId: '2bfcb58e3dce4812ad2a96657a53d597',\n        },\n        {\n          id: 'stddemo-user-id',\n          username: 'stddemo',\n          password: '12345',\n          email: 'stddemo@alfredflix.com',\n          planType: 'standard',\n          monthlyPrice: '9.99',\n          status: 'active',\n          isAdmin: false,\n          jellyfinUserId: 'c435ec8aa9e34d3995864085d73230c4',\n        },\n        {\n          id: 'premdemo-user-id',\n          username: 'premdemo',\n          password: '12345',\n          email: 'premdemo@alfredflix.com',\n          planType: 'premium',\n          monthlyPrice: '14.99',\n          status: 'active',\n          isAdmin: false,\n          jellyfinUserId: 'b017ae7d38824abd95d71d183a03b0fc',\n        },\n        {\n          id: 'masteradm-user-id',\n          username: 'masteradm',\n          password: 'MasterPlan6172',\n          email: 'masteradm@alfredflix.com',\n          planType: 'premium',\n          monthlyPrice: '14.99',\n          status: 'active',\n          isAdmin: true,\n          jellyfinUserId: '500716705ea1402e81d5a5c946aefe67',\n        }\n      ];\n\n      for (const user of defaultUsers) {\n        await db.insert(users).values({\n          ...user,\n          createdAt: new Date()\n        });\n      }\n      \n      console.log('Database initialized with default users');\n    }\n  } catch (error) {\n    console.error('Failed to initialize database:', error);\n  }\n}\n\n// Initialize and export storage\nconst initializeStorage = async (): Promise<IStorage> => {\n  await initializeDatabase();\n  return new DatabaseStorage();\n};\n\n// Export a promise that resolves to the initialized storage\nexport const storage = await initializeStorage();\n","size_bytes":15062},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, numeric } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  planType: text(\"plan_type\").notNull().default(\"standard\"),\n  monthlyPrice: numeric(\"monthly_price\", { precision: 10, scale: 2 }).default(\"9.99\"),\n  jellyfinUserId: text(\"jellyfin_user_id\"),\n  stripeCustomerId: text(\"stripe_customer_id\"),\n  stripeSubscriptionId: text(\"stripe_subscription_id\"),\n  status: text(\"status\").notNull().default(\"active\"),\n  isAdmin: boolean(\"is_admin\").notNull().default(false),\n  expiresAt: timestamp(\"expires_at\", { mode: 'string' }).default(sql`NOW() + INTERVAL '30 days'`),\n  neverExpires: boolean(\"never_expires\").notNull().default(false),\n  referralCode: text(\"referral_code\").unique(),\n  referredBy: text(\"referred_by\"),\n  referralCredits: numeric(\"referral_credits\", { precision: 10, scale: 2 }).default(\"0.00\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  message: text(\"message\").notNull(),\n  status: text(\"status\").notNull().default(\"new\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const watchProgress = pgTable(\"watch_progress\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  jellyfinItemId: text(\"jellyfin_item_id\").notNull(),\n  progressTicks: text(\"progress_ticks\").notNull().default(\"0\"),\n  totalTicks: text(\"total_ticks\").notNull(),\n  isWatched: boolean(\"is_watched\").notNull().default(false),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const coupons = pgTable(\"coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  discountType: text(\"discount_type\").notNull(), // 'percent', 'amount', 'free_month'\n  discountValue: numeric(\"discount_value\", { precision: 10, scale: 2 }).notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  oneTimeUse: boolean(\"one_time_use\").notNull().default(false),\n  newAccountsOnly: boolean(\"new_accounts_only\").notNull().default(false),\n  maxUses: numeric(\"max_uses\", { precision: 10, scale: 0 }),\n  currentUses: numeric(\"current_uses\", { precision: 10, scale: 0 }).default(\"0\"),\n  expiresAt: timestamp(\"expires_at\", { mode: 'string' }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: varchar(\"created_by\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  email: true,\n  planType: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).pick({\n  name: true,\n  email: true,\n  phone: true,\n  message: true,\n});\n\nexport const insertWatchProgressSchema = createInsertSchema(watchProgress).pick({\n  userId: true,\n  jellyfinItemId: true,\n  progressTicks: true,\n  totalTicks: true,\n  isWatched: true,\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).pick({\n  code: true,\n  name: true,\n  discountType: true,\n  discountValue: true,\n  isActive: true,\n  oneTimeUse: true,\n  newAccountsOnly: true,\n  maxUses: true,\n  expiresAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertWatchProgress = z.infer<typeof insertWatchProgressSchema>;\nexport type WatchProgress = typeof watchProgress.$inferSelect;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type Coupon = typeof coupons.$inferSelect;\n","size_bytes":4129},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/use-auth\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport SearchPage from \"@/pages/search\";\nimport PlayerPage from \"@/pages/player\";\nimport Subscribe from \"@/pages/subscribe\";\nimport Account from \"@/pages/account\";\nimport NotFound from \"@/pages/not-found\";\nimport { lazy } from 'react';\n\nconst AdminPanel = lazy(() => import(\"@/pages/admin\"));\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-zinc-900 flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return <>{children}</>;\n}\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/search\">\n        <ProtectedRoute>\n          <SearchPage />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/subscribe\" component={Subscribe} />\n      <Route path=\"/payment-success\">\n        {() => {\n          const PaymentSuccess = lazy(() => import('./pages/payment-success'));\n          return <PaymentSuccess />;\n        }}\n      </Route>\n      <Route path=\"/account\">\n        <ProtectedRoute>\n          <Account />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/admin\">\n        <ProtectedRoute>\n          <AdminPanel />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/player/:itemId/:quality?\">\n        {(params) => (\n          <ProtectedRoute>\n            <PlayerPage params={params as { itemId?: string; quality?: 'auto' | '1080p' | '4k' }} />\n          </ProtectedRoute>\n        )}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <div className=\"dark\">\n            <Toaster />\n            <Router />\n          </div>\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2656},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(38, 92%, 50%);\n  --primary-foreground: hsl(240, 10%, 3.9%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  \n  /* AlfredFlix Custom Colors */\n  --alfredflix-primary: hsl(38, 92%, 50%);\n  --alfredflix-primary-dark: hsl(31, 91%, 42%);\n  --alfredflix-surface: hsl(240, 10%, 10%);\n  --alfredflix-surface-dark: hsl(240, 10%, 6%);\n  --alfredflix-text-primary: hsl(0, 0%, 98%);\n  --alfredflix-text-secondary: hsl(240, 5%, 65%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(38, 92%, 50%);\n  --primary-foreground: hsl(240, 10%, 3.9%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased;\n    background: hsl(240, 10%, 6%) !important;\n    color: hsl(0, 0%, 98%) !important;\n  }\n}\n\n@layer components {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(240, 10%, 6%) 0%, hsl(240, 10%, 10%) 50%, hsl(240, 10%, 6%) 100%);\n  }\n  \n  .luxury-card {\n    background: linear-gradient(145deg, rgba(39, 39, 42, 0.95) 0%, rgba(24, 24, 27, 0.95) 100%) !important;\n    border: 1px solid rgba(161, 161, 170, 0.2) !important;\n    backdrop-filter: blur(10px);\n    color: hsl(0, 0%, 98%) !important;\n  }\n  \n  .media-card {\n    @apply transition-all duration-300 ease-out;\n  }\n  \n  .media-card:hover .media-overlay {\n    @apply opacity-100;\n  }\n  \n  .media-overlay {\n    @apply opacity-0 transition-all duration-300;\n  }\n\n  .alfredflix-gradient {\n    background: linear-gradient(90deg, hsl(var(--alfredflix-primary)), hsl(var(--alfredflix-primary-dark)));\n  }\n\n  .alfredflix-text-gradient {\n    background: linear-gradient(90deg, hsl(var(--alfredflix-primary)), hsl(var(--alfredflix-primary-dark)));\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n\n  /* Global text improvements */\n  .text-zinc-400 {\n    color: rgb(161 161 170) !important;\n  }\n\n  .text-zinc-300 {\n    color: rgb(212 212 216) !important;\n  }\n\n  .text-zinc-200 {\n    color: rgb(228 228 231) !important;\n  }\n\n  .text-white {\n    color: rgb(255 255 255) !important;\n  }\n\n  /* Button text visibility */\n  .button, button {\n    color: inherit !important;\n  }\n\n  /* Card content visibility */\n  .luxury-card p, .luxury-card span, .luxury-card div {\n    color: rgb(228 228 231) !important;\n  }\n\n  /* Navigation text */\n  nav a, nav button, nav span {\n    color: inherit !important;\n  }\n\n  /* Stripe Elements Styling */\n  .payment-element-container {\n    @apply bg-zinc-800/30 rounded-lg p-6 border border-zinc-700/30;\n  }\n\n  .StripeElement {\n    @apply bg-zinc-800/50 border border-zinc-700/50 rounded-md p-4 transition-colors;\n  }\n\n  /* Enhanced media card styling with consistent 3:2 aspect ratio */\n  .media-card {\n    @apply transition-all duration-300 ease-out;\n  }\n\n  .media-card img {\n    object-fit: cover;\n    object-position: center;\n  }\n\n  /* Ensure consistent aspect ratio across all card sizes */\n  .media-card .aspect-\\[3\\/2\\] {\n    aspect-ratio: 3/2;\n  }\n\n  /* Hide scrollbars but keep functionality */\n  .scrollbar-hide {\n    -ms-overflow-style: none;  /* IE and Edge */\n    scrollbar-width: none;     /* Firefox */\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;             /* Chrome, Safari, Opera */\n  }\n\n  /* Mobile text truncation utility */\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .StripeElement:focus,\n  .StripeElement--focus {\n    @apply border-amber-500/50 shadow-sm;\n  }\n\n  .StripeElement--invalid {\n    @apply border-red-500/50;\n  }\n\n  .StripeElement input {\n    @apply text-white bg-transparent;\n  }\n\n  .StripeElement input::placeholder {\n    @apply text-zinc-400;\n  }\n}\n\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { \n    opacity: 0; \n    transform: translateY(30px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes scaleIn {\n  from { \n    opacity: 0; \n    transform: scale(0.95); \n  }\n  to { \n    opacity: 1; \n    transform: scale(1); \n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.6s ease-out;\n}\n\n.animate-scale-in {\n  animation: scaleIn 0.3s ease-out;\n}\n\n/* Video.js custom styling */\n.video-js {\n  @apply w-full h-full;\n}\n\n.video-js .vjs-big-play-button {\n  background: hsl(var(--alfredflix-primary));\n  border: none;\n  border-radius: 50%;\n}\n\n.video-js .vjs-control-bar {\n  background: linear-gradient(transparent, rgba(0,0,0,0.8));\n}\n\n.video-js .vjs-progress-control .vjs-progress-holder .vjs-play-progress {\n  background: hsl(var(--alfredflix-primary));\n}\n","size_bytes":5921},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/auth-modal.tsx":{"content":"import { useState } from 'react';\nimport { Crown, Eye, EyeOff, AlertCircle } from 'lucide-react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AuthModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AuthModal({ open, onOpenChange }: AuthModalProps) {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState('');\n  const { login, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    if (!username || !password) {\n      setError('Please enter both username and password');\n      return;\n    }\n\n    try {\n      await login(username, password);\n      onOpenChange(false);\n      setUsername('');\n      setPassword('');\n      \n      toast({\n        title: \"Welcome Back\",\n        description: \"Successfully signed in to your cinematic sanctuary.\",\n      });\n      \n      // Redirect to dashboard after successful login\n      window.location.href = '/dashboard';\n    } catch (error) {\n      setError('Invalid username or password. Please try again.');\n    }\n  };\n\n  const handleClose = () => {\n    onOpenChange(false);\n    setError('');\n    setUsername('');\n    setPassword('');\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md luxury-card animate-scale-in\" data-testid=\"auth-modal\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"w-16 h-16 mx-auto mb-4 rounded-full alfredflix-gradient flex items-center justify-center\">\n            <Crown className=\"text-zinc-900 w-8 h-8\" />\n          </div>\n          <DialogTitle className=\"font-serif text-2xl font-semibold\" data-testid=\"auth-modal-title\">\n            Welcome Back\n          </DialogTitle>\n          <p className=\"text-zinc-400\" data-testid=\"auth-modal-subtitle\">\n            Access your cinematic sanctuary\n          </p>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4 mt-6\">\n          <div>\n            <Label htmlFor=\"username\" className=\"block text-sm font-medium mb-2\">\n              Username\n            </Label>\n            <Input\n              id=\"username\"\n              type=\"text\"\n              required\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              className=\"bg-zinc-800/50 border-zinc-700/50 focus:ring-amber-500/50\"\n              data-testid=\"input-username\"\n              disabled={isLoading}\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"password\" className=\"block text-sm font-medium mb-2\">\n              Password\n            </Label>\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                required\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"bg-zinc-800/50 border-zinc-700/50 focus:ring-amber-500/50 pr-10\"\n                data-testid=\"input-password\"\n                disabled={isLoading}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                onClick={() => setShowPassword(!showPassword)}\n                data-testid=\"toggle-password-visibility\"\n              >\n                {showPassword ? (\n                  <EyeOff className=\"h-4 w-4 text-zinc-400\" />\n                ) : (\n                  <Eye className=\"h-4 w-4 text-zinc-400\" />\n                )}\n              </Button>\n            </div>\n          </div>\n          \n          {error && (\n            <Alert variant=\"destructive\" data-testid=\"auth-error\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n          \n          <Button \n            type=\"submit\" \n            disabled={isLoading}\n            className=\"w-full py-3 alfredflix-gradient text-zinc-900 font-medium hover:shadow-lg hover:shadow-amber-500/25 transition-all\"\n            data-testid=\"submit-login\"\n          >\n            {isLoading ? 'Signing In...' : 'Sign In'}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":4874},"client/src/components/contact-section.tsx":{"content":"import { useState } from 'react';\nimport { Send } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\n\nexport function ContactSection() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    message: ''\n  });\n  const { toast } = useToast();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.name || !formData.email || !formData.message) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      await apiRequest('POST', '/api/contact', formData);\n      \n      toast({\n        title: \"Message Sent\",\n        description: \"Thank you for reaching out to AlfredFLIX. Our concierge team will be in touch shortly to assist you.\",\n      });\n\n      setFormData({\n        name: '',\n        email: '',\n        phone: '',\n        message: ''\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section className=\"py-20 bg-zinc-800/30\" id=\"contact\" data-testid=\"contact-section\">\n      <div className=\"container mx-auto px-4 lg:px-6\">\n        <div className=\"max-w-2xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"font-serif text-3xl md:text-4xl font-semibold mb-4\" data-testid=\"contact-title\">\n              May We Be of{' '}\n              <span className=\"alfredflix-text-gradient\">\n                Assistance?\n              </span>\n            </h2>\n            <p className=\"text-lg text-zinc-400\" data-testid=\"contact-description\">\n              Our concierge team is at your disposal for any inquiries, technical assistance, or bespoke requests.\n            </p>\n          </div>\n\n          <Card className=\"luxury-card\">\n            <CardContent className=\"p-8\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"name\" className=\"block text-sm font-medium mb-2\">\n                      Your Name (Required)\n                    </Label>\n                    <Input\n                      id=\"name\"\n                      name=\"name\"\n                      type=\"text\"\n                      required\n                      value={formData.name}\n                      onChange={handleInputChange}\n                      className=\"bg-zinc-800/50 border-zinc-700/50 focus:ring-amber-500/50\"\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"email\" className=\"block text-sm font-medium mb-2\">\n                      Your Email (Required)\n                    </Label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleInputChange}\n                      className=\"bg-zinc-800/50 border-zinc-700/50 focus:ring-amber-500/50\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"phone\" className=\"block text-sm font-medium mb-2\">\n                    Your Phone (Optional)\n                  </Label>\n                  <Input\n                    id=\"phone\"\n                    name=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={handleInputChange}\n                    className=\"bg-zinc-800/50 border-zinc-700/50 focus:ring-amber-500/50\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"message\" className=\"block text-sm font-medium mb-2\">\n                    Your Message (Required)\n                  </Label>\n                  <Textarea\n                    id=\"message\"\n                    name=\"message\"\n                    required\n                    rows={4}\n                    value={formData.message}\n                    onChange={handleInputChange}\n                    className=\"bg-zinc-800/50 border-zinc-700/50 focus:ring-amber-500/50 resize-none\"\n                    data-testid=\"input-message\"\n                  />\n                </div>\n                \n                <Button \n                  type=\"submit\" \n                  disabled={isSubmitting}\n                  className=\"w-full py-3 alfredflix-gradient text-zinc-900 font-medium hover:shadow-lg hover:shadow-amber-500/25 transition-all\"\n                  data-testid=\"submit-contact\"\n                >\n                  <Send className=\"w-4 h-4 mr-2\" />\n                  {isSubmitting ? 'Sending...' : 'Send Request'}\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5863},"client/src/components/faq-section.tsx":{"content":"import { useState } from 'react';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\n\nconst faqs = [\n  {\n    question: 'What makes AlfredFlix different from other streaming services?',\n    answer: 'AlfredFlix focuses on quality over quantity. We provide a carefully curated library of premium content without advertisements, ensuring every viewing experience is exceptional. Our concierge approach means no endless scrolling – just thoughtfully selected entertainment.'\n  },\n  {\n    question: 'Can I upgrade or downgrade my subscription plan?',\n    answer: 'Absolutely. You can change your subscription plan at any time from your account settings. Upgrades take effect immediately, while downgrades will apply at your next billing cycle to ensure you get full value from your current plan.'\n  },\n  {\n    question: 'What devices support AlfredFlix?',\n    answer: 'AlfredFlix works seamlessly across web browsers, iOS and Android mobile devices, smart TVs, Android TV, Roku, and more. We also offer dedicated apps for the best experience on each platform.'\n  },\n  {\n    question: 'Is there really no advertising?',\n    answer: 'Correct. AlfredFlix is completely advertisement-free. We believe premium entertainment should never be interrupted by commercials. Your subscription covers all costs, ensuring an uninterrupted viewing experience.'\n  },\n  {\n    question: 'Can I download content for offline viewing?',\n    answer: 'Yes, both Standard and Premium subscribers can download content for offline viewing on mobile devices and tablets. This feature is perfect for travel or areas with limited internet connectivity.'\n  },\n  {\n    question: 'What\\'s included with Premium vs Standard?',\n    answer: 'Standard includes 1080p HD streaming and 2 simultaneous streams. Premium adds 4K Ultra HD quality, 4 simultaneous streams, and early access to new releases. Both plans include offline downloads and ad-free viewing.'\n  },\n  {\n    question: 'How does the content curation work?',\n    answer: 'Our team of entertainment experts carefully selects each title based on critical acclaim, cultural significance, and viewer satisfaction. We prioritize quality storytelling and cinematic excellence over trending content.'\n  },\n  {\n    question: 'Is there a free trial available?',\n    answer: 'New customers can use referral codes to get their first month for just $1. Referral codes are available from existing members, or use FREEMONTH for a free first month (limited availability).'\n  },\n  {\n    question: 'How do I cancel my subscription?',\n    answer: 'You can cancel your subscription at any time from your account settings. Your access will continue until the end of your current billing period, and you won\\'t be charged for the following month.'\n  },\n  {\n    question: 'Do you offer family or group plans?',\n    answer: 'Our Premium plan supports up to 4 simultaneous streams, making it perfect for families. We\\'re also developing dedicated family plans with additional features – stay tuned for updates.'\n  }\n];\n\nexport function FAQSection() {\n  const [openItems, setOpenItems] = useState<number[]>([]);\n\n  const toggleItem = (index: number) => {\n    setOpenItems(prev => \n      prev.includes(index) \n        ? prev.filter(i => i !== index)\n        : [...prev, index]\n    );\n  };\n\n  return (\n    <section className=\"py-20 bg-zinc-900\" id=\"faq\" data-testid=\"faq-section\">\n      <div className=\"container mx-auto px-4 lg:px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-3xl md:text-5xl font-semibold mb-4\" data-testid=\"faq-title\">\n            Frequently Asked{' '}\n            <span className=\"alfredflix-text-gradient\">\n              Questions\n            </span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-zinc-400 max-w-2xl mx-auto\" data-testid=\"faq-description\">\n            Find answers to common questions about AlfredFlix. Our concierge team is always here to help.\n          </p>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto space-y-4\">\n          {faqs.map((faq, index) => (\n            <Card \n              key={index}\n              className=\"luxury-card transition-all duration-300 hover:border-amber-500/30\"\n              data-testid={`faq-item-${index}`}\n            >\n              <CardContent className=\"p-0\">\n                <button\n                  className=\"w-full p-6 text-left flex items-center justify-between hover:bg-zinc-800/30 transition-colors rounded-lg\"\n                  onClick={() => toggleItem(index)}\n                  data-testid={`faq-toggle-${index}`}\n                >\n                  <h3 className=\"font-semibold text-lg text-white pr-4\" data-testid={`faq-question-${index}`}>\n                    {faq.question}\n                  </h3>\n                  {openItems.includes(index) ? (\n                    <ChevronUp className=\"w-5 h-5 text-amber-500 flex-shrink-0\" />\n                  ) : (\n                    <ChevronDown className=\"w-5 h-5 text-amber-500 flex-shrink-0\" />\n                  )}\n                </button>\n                \n                {openItems.includes(index) && (\n                  <div className=\"px-6 pb-6 pt-0\" data-testid={`faq-answer-${index}`}>\n                    <p className=\"text-zinc-400 leading-relaxed\">\n                      {faq.answer}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Contact CTA */}\n        <div className=\"mt-16 text-center\">\n          <div className=\"max-w-2xl mx-auto\">\n            <h3 className=\"font-semibold text-xl mb-4 text-white\">\n              Still have questions?\n            </h3>\n            <p className=\"text-zinc-400 mb-6\">\n              Our concierge team is standing by to provide personalized assistance. \n              Reach out and experience the AlfredFlix difference in customer service.\n            </p>\n            <a \n              href=\"#contact\" \n              className=\"inline-flex items-center px-8 py-3 rounded-lg alfredflix-gradient text-zinc-900 font-semibold hover:shadow-lg hover:scale-105 transition-all duration-300\"\n              data-testid=\"faq-contact-button\"\n            >\n              Contact Our Concierge Team\n            </a>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":6398},"client/src/components/features-section.tsx":{"content":"import { Crown, Zap, Shield, Monitor, Smartphone, Tv } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\n\nconst features = [\n  {\n    icon: Crown,\n    title: 'Premium Quality',\n    description: 'Experience cinema in stunning 4K Ultra HD with lossless audio. Every frame delivered exactly as the creators intended.',\n    highlight: true\n  },\n  {\n    icon: Zap,\n    title: 'Lightning Fast',\n    description: 'Instant streaming with our optimized content delivery network. No buffering, no waiting, just pure entertainment.',\n    highlight: false\n  },\n  {\n    icon: Shield,\n    title: 'Ad-Free Experience',\n    description: 'Enjoy uninterrupted viewing without a single advertisement. Your cinematic journey remains completely immersive.',\n    highlight: false\n  },\n  {\n    icon: Monitor,\n    title: 'Multi-Device Access',\n    description: 'Stream seamlessly across web browsers, mobile devices, and smart TVs. Your library follows you everywhere.',\n    highlight: false\n  },\n  {\n    icon: Smartphone,\n    title: 'Offline Viewing',\n    description: 'Download your favorite content for offline enjoyment. Perfect for travel or areas with limited connectivity.',\n    highlight: false\n  },\n  {\n    icon: Tv,\n    title: 'Curated Library',\n    description: 'Hand-selected films and shows chosen by entertainment connoisseurs. Quality over quantity, always.',\n    highlight: true\n  }\n];\n\nexport function FeaturesSection() {\n  return (\n    <section className=\"py-20 bg-zinc-900\" id=\"features\" data-testid=\"features-section\">\n      <div className=\"container mx-auto px-4 lg:px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-3xl md:text-5xl font-semibold mb-4\" data-testid=\"features-title\">\n            Engineered for{' '}\n            <span className=\"alfredflix-text-gradient\">\n              Excellence\n            </span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-zinc-400 max-w-2xl mx-auto\" data-testid=\"features-description\">\n            Every aspect of AlfredFlix has been crafted to deliver the ultimate viewing experience, \n            from our curated content library to our cutting-edge streaming technology.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {features.map((feature, index) => (\n            <Card \n              key={feature.title}\n              className={`luxury-card group hover:border-amber-500/30 transition-all duration-300 ${\n                feature.highlight ? 'border-amber-500/20' : ''\n              }`}\n              data-testid={`feature-${index}`}\n            >\n              <CardContent className=\"p-8\">\n                <div className={`w-16 h-16 rounded-xl mb-6 flex items-center justify-center transition-all duration-300 group-hover:scale-110 ${\n                  feature.highlight \n                    ? 'alfredflix-gradient' \n                    : 'bg-zinc-800 group-hover:bg-zinc-700'\n                }`}>\n                  <feature.icon \n                    className={`w-8 h-8 ${\n                      feature.highlight \n                        ? 'text-zinc-900' \n                        : 'text-amber-500 group-hover:text-amber-400'\n                    }`} \n                  />\n                </div>\n                <h3 className=\"font-semibold text-xl mb-3 text-white\" data-testid={`feature-title-${index}`}>\n                  {feature.title}\n                </h3>\n                <p className=\"text-zinc-400 leading-relaxed\" data-testid={`feature-description-${index}`}>\n                  {feature.description}\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Stats Section */}\n        <div className=\"mt-20 grid grid-cols-2 md:grid-cols-4 gap-8\">\n          <div className=\"text-center\">\n            <div className=\"font-serif text-3xl md:text-4xl font-bold mb-2 alfredflix-text-gradient\">\n              99.9%\n            </div>\n            <p className=\"text-zinc-400 text-sm\">Uptime Guarantee</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-serif text-3xl md:text-4xl font-bold mb-2 alfredflix-text-gradient\">\n              4K\n            </div>\n            <p className=\"text-zinc-400 text-sm\">Ultra HD Quality</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-serif text-3xl md:text-4xl font-bold mb-2 alfredflix-text-gradient\">\n              24/7\n            </div>\n            <p className=\"text-zinc-400 text-sm\">Concierge Support</p>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"font-serif text-3xl md:text-4xl font-bold mb-2 alfredflix-text-gradient\">\n              ∞\n            </div>\n            <p className=\"text-zinc-400 text-sm\">Unlimited Streaming</p>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4921},"client/src/components/hero-section.tsx":{"content":"import { ArrowRight, Crown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\n\ninterface HeroSectionProps {\n  onGetStarted?: () => void;\n}\n\nexport function HeroSection({ onGetStarted }: HeroSectionProps) {\n  const scrollToPricing = () => {\n    document.getElementById('pricing')?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center pt-16 overflow-hidden\" data-testid=\"hero-section\">\n      {/* Movie/TV Background */}\n      <div className=\"absolute inset-0\">\n        <img \n          src=\"https://images.unsplash.com/photo-1489599511207-4c26a3ae9441?ixlib=rb-4.0.3&auto=format&fit=crop&w=2970&q=80\" \n          alt=\"Premium cinema experience\" \n          className=\"w-full h-full object-cover\"\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-zinc-900 via-zinc-900/70 to-zinc-900/30\" />\n      </div>\n      \n      <div className=\"container mx-auto px-4 lg:px-6 relative z-10\">\n        <div className=\"max-w-3xl\">\n          <h1 className=\"font-serif text-4xl md:text-6xl lg:text-7xl font-bold leading-tight mb-6 text-white drop-shadow-2xl\" data-testid=\"hero-title\">\n            Stream Movies & TV Shows{' '}\n            <span className=\"alfredflix-text-gradient\">\n              Like Never Before\n            </span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-zinc-200 mb-8 leading-relaxed drop-shadow-lg\" data-testid=\"hero-description\">\n            🎬 <strong>4K Ultra HD Movies</strong> • 📺 <strong>Latest TV Shows</strong> • 🚫 <strong>Zero Ads</strong> • 📱 <strong>All Devices</strong>\n          </p>\n          \n          <p className=\"text-lg text-zinc-300 mb-8 leading-relaxed\">\n            Join thousands enjoying unlimited premium streaming with crystal-clear quality and instant access to the latest releases.\n          </p>\n          \n          <div className=\"animate-slide-up\" style={{ animationDelay: '0.4s' }}>\n            <Button \n              size=\"lg\"\n              onClick={onGetStarted || scrollToPricing}\n              className=\"alfredflix-gradient text-zinc-900 font-semibold text-lg hover:shadow-xl hover:shadow-amber-500/30 transition-all group\"\n              data-testid=\"hero-cta-button\"\n            >\n              <Crown className=\"w-5 h-5 mr-3\" />\n              Grant Access\n              <ArrowRight className=\"w-5 h-5 ml-3 group-hover:translate-x-1 transition-transform\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2552},"client/src/components/media-card.tsx":{"content":"import { Play, Clock, Star } from 'lucide-react';\nimport { Card } from '@/components/ui/card';\nimport { jellyfinApi, type JellyfinItem } from '@/lib/jellyfin-api';\nimport { Badge } from '@/components/ui/badge';\nimport { fanartAPI } from '@/lib/fanart-api';\nimport { useState, useEffect } from 'react';\n\ninterface MediaCardProps {\n  item: JellyfinItem;\n  showProgress?: boolean;\n  progressPercent?: number;\n  timeRemaining?: string;\n  size?: 'small' | 'medium' | 'large';\n  onClick?: () => void;\n}\n\nexport function MediaCard({ \n  item, \n  showProgress, \n  progressPercent = 0, \n  timeRemaining,\n  size = 'medium',\n  onClick \n}: MediaCardProps) {\n  const [fanartImageUrl, setFanartImageUrl] = useState<string | null>(null);\n\n  // Updated size classes with better mobile responsiveness and 3:2 aspect ratio\n  const sizeClasses = {\n    small: 'w-28 sm:w-32 md:w-40 flex-shrink-0',    // Mobile-first responsive\n    medium: 'w-36 sm:w-44 md:w-48 flex-shrink-0',   // Better mobile sizing\n    large: 'w-44 sm:w-56 md:w-64 flex-shrink-0'     // Larger for continue watching\n  };\n\n  // Get FanArt image if available\n  useEffect(() => {\n    async function loadFanArt() {\n      if (item.ProviderIds?.Tmdb) {\n        const fanartData = await fanartAPI.getMovieArt(item.ProviderIds.Tmdb);\n        if (fanartData) {\n          const posterUrl = fanartAPI.getBestPoster(fanartData, 'movie');\n          if (posterUrl) {\n            setFanartImageUrl(posterUrl);\n          }\n        }\n      } else if (item.ProviderIds?.Tvdb && (item.Type === 'Series' || item.Type === 'Episode')) {\n        const fanartData = await fanartAPI.getShowArt(item.ProviderIds.Tvdb);\n        if (fanartData) {\n          const posterUrl = fanartAPI.getBestPoster(fanartData, 'tv');\n          if (posterUrl) {\n            setFanartImageUrl(posterUrl);\n          }\n        }\n      }\n    }\n    \n    loadFanArt();\n  }, [item.ProviderIds?.Tmdb, item.ProviderIds?.Tvdb, item.Type]);\n\n  // Fallback to Jellyfin images if FanArt not available\n  const posterUrl = fanartImageUrl || \n    (item.ImageTags?.Primary \n      ? jellyfinApi.getImageUrl(item.Id, 'Primary', item.ImageTags.Primary)\n      : '/api/placeholder/300/450');\n\n  const backdropUrl = item.BackdropImageTags?.[0]\n    ? jellyfinApi.getImageUrl(item.Id, 'Backdrop', item.BackdropImageTags[0])\n    : posterUrl;\n\n  const displayImage = showProgress ? backdropUrl : posterUrl;\n\n  const formatRuntime = (ticks?: number) => {\n    if (!ticks) return '';\n    const minutes = Math.floor(ticks / 600000000); // Convert ticks to minutes\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  return (\n    <Card \n      className={`media-card ${sizeClasses[size]} aspect-[3/2] relative group cursor-pointer overflow-hidden bg-zinc-900 border-zinc-800`}\n      onClick={onClick}\n      data-testid={`media-card-${item.Id}`}\n    >\n      <div className=\"w-full h-full relative overflow-hidden\">\n        <img \n          src={displayImage}\n          alt={item.Name}\n          className=\"absolute inset-0 w-full h-full object-cover transition-transform duration-300 group-hover:scale-105\"\n          onError={(e) => {\n            // Fallback to Jellyfin image if FanArt fails\n            if (fanartImageUrl && e.currentTarget.src === fanartImageUrl) {\n              const fallbackUrl = item.ImageTags?.Primary \n                ? jellyfinApi.getImageUrl(item.Id, 'Primary', item.ImageTags.Primary)\n                : '/api/placeholder/300/450';\n              e.currentTarget.src = fallbackUrl;\n            } else {\n              e.currentTarget.src = '/api/placeholder/300/450';\n            }\n          }}\n        />\n      </div>\n      \n      {/* Overlay */}\n      <div className=\"media-overlay absolute inset-0 bg-black/60 flex flex-col items-center justify-center\">\n        <Play className=\"text-white text-2xl lg:text-3xl mb-2\" />\n        \n        {item.CommunityRating && (\n          <div className=\"flex items-center space-x-1 mb-2\">\n            <Star className=\"w-4 h-4 text-amber-500 fill-current\" />\n            <span className=\"text-white text-sm\">{item.CommunityRating.toFixed(1)}</span>\n          </div>\n        )}\n\n        <div className=\"flex flex-wrap gap-1 justify-center\">\n          {item.Type === 'Movie' && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Movie\n            </Badge>\n          )}\n          {item.Type === 'Series' && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Series\n            </Badge>\n          )}\n          {item.ProductionYear && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {item.ProductionYear}\n            </Badge>\n          )}\n        </div>\n      </div>\n\n      {/* Progress bar for continue watching */}\n      {showProgress && progressPercent > 0 && (\n        <div className=\"absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/80\">\n          <div className=\"w-full bg-zinc-700 h-1 rounded-full mb-1\">\n            <div \n              className=\"bg-amber-500 h-1 rounded-full transition-all\"\n              style={{ width: `${progressPercent}%` }}\n            />\n          </div>\n          {timeRemaining && (\n            <p className=\"text-xs text-zinc-300\">{timeRemaining}</p>\n          )}\n        </div>\n      )}\n\n      {/* Title and info */}\n      <div className=\"absolute bottom-0 left-0 right-0 p-3 bg-gradient-to-t from-black/80 group-hover:from-black/90 transition-colors\">\n        <h3 className=\"font-semibold text-sm text-white truncate mb-1\" data-testid={`media-title-${item.Id}`}>\n          {item.Name}\n        </h3>\n        \n        <div className=\"flex items-center space-x-2 text-xs text-zinc-300\">\n          {item.ProductionYear && (\n            <span>{item.ProductionYear}</span>\n          )}\n          {item.RunTimeTicks && (\n            <>\n              <span>•</span>\n              <span>{formatRuntime(item.RunTimeTicks)}</span>\n            </>\n          )}\n        </div>\n\n        {/* Episode info for TV shows */}\n        {item.Type === 'Episode' && (\n          <p className=\"text-xs text-zinc-400 mt-1\">\n            {item.SeriesName && `${item.SeriesName} • `}\n            Season {item.ParentIndexNumber} Episode {item.IndexNumber}\n          </p>\n        )}\n      </div>\n    </Card>\n  );\n}\n","size_bytes":6337},"client/src/components/media-detail-modal.tsx":{"content":"import { useState } from 'react';\nimport { Play, Plus, X, Star } from 'lucide-react';\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { jellyfinApi, type JellyfinItem } from '@/lib/jellyfin-api';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface MediaDetailModalProps {\n  item: JellyfinItem | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onPlay: (quality: 'auto' | '1080p' | '4k') => void;\n}\n\nexport function MediaDetailModal({ item, open, onOpenChange, onPlay }: MediaDetailModalProps) {\n  const [selectedQuality, setSelectedQuality] = useState<'auto' | '1080p' | '4k'>('auto');\n  const { user } = useAuth();\n\n  if (!item) return null;\n\n  const backdropUrl = item.BackdropImageTags?.[0]\n    ? jellyfinApi.getImageUrl(item.Id, 'Backdrop', item.BackdropImageTags[0])\n    : '/api/placeholder/1280/720';\n\n  const posterUrl = item.ImageTags?.Primary \n    ? jellyfinApi.getImageUrl(item.Id, 'Primary', item.ImageTags.Primary)\n    : '/api/placeholder/300/450';\n\n  const formatRuntime = (ticks?: number) => {\n    if (!ticks) return '';\n    const minutes = Math.floor(ticks / 600000000);\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const handlePlay = () => {\n    onPlay(selectedQuality);\n    onOpenChange(false);\n  };\n\n  const canAccess4K = user?.planType === 'premium';\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl p-0 luxury-card overflow-hidden animate-scale-in\" data-testid=\"media-detail-modal\">\n        <div className=\"relative\">\n          {/* Backdrop Image */}\n          <div className=\"relative h-64\">\n            <img \n              src={backdropUrl}\n              alt={item.Name}\n              className=\"w-full h-full object-cover\"\n              onError={(e) => {\n                e.currentTarget.src = '/api/placeholder/1280/720';\n              }}\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent\" />\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onOpenChange(false)}\n              className=\"absolute top-4 right-4 text-white hover:text-amber-500\"\n              data-testid=\"close-modal\"\n            >\n              <X className=\"w-6 h-6\" />\n            </Button>\n          </div>\n\n          <div className=\"p-8\">\n            <div className=\"grid md:grid-cols-3 gap-8\">\n              {/* Media Info */}\n              <div className=\"md:col-span-2\">\n                <h1 className=\"font-serif text-3xl font-bold mb-4 text-white\" data-testid=\"modal-title\">\n                  {item.Name}\n                </h1>\n                \n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <Badge variant=\"outline\" className=\"text-amber-500 border-amber-500\">\n                    {item.ProductionYear}\n                  </Badge>\n                  {item.CommunityRating && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Star className=\"w-4 h-4 text-amber-500 fill-current\" />\n                      <span className=\"text-amber-500\">{item.CommunityRating.toFixed(1)}</span>\n                    </div>\n                  )}\n                  {item.RunTimeTicks && (\n                    <span className=\"text-zinc-400\">{formatRuntime(item.RunTimeTicks)}</span>\n                  )}\n                </div>\n                \n                {item.Overview && (\n                  <p className=\"text-zinc-300 mb-6 leading-relaxed\" data-testid=\"modal-overview\">\n                    {item.Overview}\n                  </p>\n                )}\n                \n                {/* Genres */}\n                {item.Genres && item.Genres.length > 0 && (\n                  <div className=\"mb-6\">\n                    <h3 className=\"text-sm font-semibold mb-2 text-zinc-400\">Genres</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {item.Genres.map((genre) => (\n                        <Badge key={genre} variant=\"secondary\" className=\"text-xs\">\n                          {genre}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {/* Quality Selection */}\n                <div className=\"mb-6\">\n                  <h3 className=\"text-lg font-semibold mb-3 text-white\">Quality Options</h3>\n                  <RadioGroup \n                    value={selectedQuality} \n                    onValueChange={(value: 'auto' | '1080p' | '4k') => setSelectedQuality(value)}\n                  >\n                    <Card className=\"luxury-card\">\n                      <CardContent className=\"p-3\">\n                        <Label \n                          htmlFor=\"quality-4k\" \n                          className={`flex items-center cursor-pointer ${!canAccess4K ? 'opacity-50' : ''}`}\n                        >\n                          <RadioGroupItem \n                            value=\"4k\" \n                            id=\"quality-4k\" \n                            className=\"mr-3\" \n                            disabled={!canAccess4K}\n                            data-testid=\"quality-4k\"\n                          />\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"font-medium text-white\">4K Ultra HD</span>\n                              <Badge className=\"alfredflix-gradient text-zinc-900 text-xs\">\n                                Premium\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-zinc-400\">\n                              {canAccess4K ? 'Best quality streaming' : 'Requires Premium plan'}\n                            </p>\n                          </div>\n                        </Label>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"luxury-card\">\n                      <CardContent className=\"p-3\">\n                        <Label htmlFor=\"quality-1080p\" className=\"flex items-center cursor-pointer\">\n                          <RadioGroupItem \n                            value=\"1080p\" \n                            id=\"quality-1080p\" \n                            className=\"mr-3\"\n                            data-testid=\"quality-1080p\"\n                          />\n                          <div className=\"flex-1\">\n                            <span className=\"font-medium text-white\">1080p Full HD</span>\n                            <p className=\"text-sm text-zinc-400\">High quality streaming</p>\n                          </div>\n                        </Label>\n                      </CardContent>\n                    </Card>\n\n                    <Card className=\"luxury-card\">\n                      <CardContent className=\"p-3\">\n                        <Label htmlFor=\"quality-auto\" className=\"flex items-center cursor-pointer\">\n                          <RadioGroupItem \n                            value=\"auto\" \n                            id=\"quality-auto\" \n                            className=\"mr-3\"\n                            data-testid=\"quality-auto\"\n                          />\n                          <div className=\"flex-1\">\n                            <span className=\"font-medium text-white\">Always Highest Quality</span>\n                            <p className=\"text-sm text-zinc-400\">\n                              Automatically select best available quality for your plan\n                            </p>\n                          </div>\n                        </Label>\n                      </CardContent>\n                    </Card>\n                  </RadioGroup>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex items-center space-x-4\">\n                  <Button \n                    onClick={handlePlay}\n                    className=\"bg-white text-zinc-900 font-semibold hover:bg-gray-200\"\n                    data-testid=\"play-button\"\n                  >\n                    <Play className=\"w-4 h-4 mr-2\" />\n                    Play Now\n                  </Button>\n                  <Button \n                    variant=\"outline\"\n                    className=\"border-zinc-600 text-white hover:bg-zinc-800\"\n                    data-testid=\"add-to-list\"\n                  >\n                    <Plus className=\"w-4 h-4 mr-2\" />\n                    My List\n                  </Button>\n                </div>\n              </div>\n\n              {/* Media Poster */}\n              <div>\n                <img \n                  src={posterUrl}\n                  alt={`${item.Name} poster`}\n                  className=\"w-full rounded-lg shadow-lg\"\n                  onError={(e) => {\n                    e.currentTarget.src = '/api/placeholder/300/450';\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9455},"client/src/components/navigation.tsx":{"content":"import { useState } from 'react';\nimport { Link, useLocation } from 'wouter';\nimport { Crown, Menu, X, User, LogOut, Library, UserCog } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface NavigationProps {\n  onAuthModal?: () => void;\n}\n\nexport function Navigation({ onAuthModal }: NavigationProps) {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const isPublicRoute = location === '/' || location === '/login';\n\n  const publicNavItems = [\n    { href: '/#home', label: 'Home' },\n    { href: '/#pricing', label: 'Pricing' },\n    { href: '/#contact', label: 'Contact' }\n  ];\n\n  const privateNavItems = [\n    { href: '/dashboard', label: 'Browse' },\n    { href: '/search', label: 'Search' }\n  ];\n\n  const currentNavItems = isPublicRoute ? publicNavItems : privateNavItems;\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 bg-zinc-900/80 backdrop-blur-lg border-b border-zinc-800/50\" data-testid=\"navigation\">\n      <div className=\"container mx-auto px-4 lg:px-6\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Logo */}\n          <Link href={user ? \"/dashboard\" : \"/\"} className=\"flex items-center space-x-3\" data-testid=\"logo-link\">\n            <div className=\"w-10 h-10 rounded-lg alfredflix-gradient flex items-center justify-center\">\n              <Crown className=\"text-zinc-900 w-5 h-5\" />\n            </div>\n            <span className=\"font-serif text-xl font-semibold alfredflix-text-gradient\">\n              AlfredFlix\n            </span>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {currentNavItems.map((item) => (\n              <a\n                key={item.href}\n                href={item.href}\n                className=\"text-zinc-400 hover:text-amber-500 transition-colors cursor-pointer\"\n                data-testid={`nav-${item.label.toLowerCase()}`}\n              >\n                {item.label}\n              </a>\n            ))}\n          </div>\n\n          {/* Desktop Auth/User Menu */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            {user ? (\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-zinc-400 capitalize\" data-testid=\"user-plan\">\n                  {user.planType}\n                </span>\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"w-8 h-8 rounded-full alfredflix-gradient p-0\" data-testid=\"user-menu\">\n                      <User className=\"w-4 h-4 text-zinc-900\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuItem className=\"flex items-center space-x-2\" data-testid=\"menu-profile\">\n                      <User className=\"w-4 h-4\" />\n                      <span>{user.Name}</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      className=\"flex items-center space-x-2 cursor-pointer\" \n                      onClick={() => window.location.href = '/dashboard'}\n                      data-testid=\"menu-library\"\n                    >\n                      <Library className=\"w-4 h-4\" />\n                      <span>Library</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      className=\"flex items-center space-x-2 cursor-pointer\" \n                      onClick={() => window.location.href = '/account'}\n                      data-testid=\"menu-account\"\n                    >\n                      <UserCog className=\"w-4 h-4\" />\n                      <span>Account</span>\n                    </DropdownMenuItem>\n                    {user.isAdmin && (\n                      <DropdownMenuItem \n                        className=\"flex items-center space-x-2 cursor-pointer\" \n                        onClick={() => window.location.href = '/admin'}\n                        data-testid=\"menu-admin\"\n                      >\n                        <Crown className=\"w-4 h-4\" />\n                        <span>Admin Panel</span>\n                      </DropdownMenuItem>\n                    )}\n                    <DropdownMenuItem \n                      className=\"flex items-center space-x-2 text-red-400\" \n                      onClick={logout}\n                      data-testid=\"menu-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4\" />\n                      <span>Sign Out</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            ) : (\n              <Button \n                onClick={onAuthModal}\n                className=\"alfredflix-gradient text-zinc-900 font-medium hover:shadow-lg hover:shadow-amber-500/25\"\n                data-testid=\"signin-button\"\n              >\n                Sign In\n              </Button>\n            )}\n          </div>\n\n          {/* Mobile Menu */}\n          <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n            <SheetTrigger asChild className=\"md:hidden\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-button\">\n                <Menu className=\"w-5 h-5\" />\n              </Button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-80\">\n              <div className=\"flex flex-col space-y-6 mt-8\">\n                {currentNavItems.map((item) => (\n                  <a\n                    key={item.href}\n                    href={item.href}\n                    className=\"text-lg text-zinc-300 hover:text-amber-500 transition-colors\"\n                    onClick={() => setMobileOpen(false)}\n                    data-testid={`mobile-nav-${item.label.toLowerCase()}`}\n                  >\n                    {item.label}\n                  </a>\n                ))}\n                \n                {user ? (\n                  <div className=\"pt-6 border-t border-zinc-800\">\n                    <div className=\"flex items-center space-x-3 mb-4\">\n                      <div className=\"w-8 h-8 rounded-full alfredflix-gradient flex items-center justify-center\">\n                        <User className=\"w-4 h-4 text-zinc-900\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-white\">{user.Name}</p>\n                        <p className=\"text-sm text-zinc-400 capitalize\">{user.planType}</p>\n                      </div>\n                    </div>\n                    <Button \n                      onClick={() => { window.location.href = '/dashboard'; setMobileOpen(false); }}\n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-zinc-300 mb-2\"\n                      data-testid=\"mobile-library\"\n                    >\n                      <Library className=\"w-4 h-4 mr-2\" />\n                      Library\n                    </Button>\n                    <Button \n                      onClick={() => { window.location.href = '/account'; setMobileOpen(false); }}\n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-zinc-300 mb-2\"\n                      data-testid=\"mobile-account\"\n                    >\n                      <UserCog className=\"w-4 h-4 mr-2\" />\n                      Account\n                    </Button>\n                    {user.isAdmin && (\n                      <Button \n                        onClick={() => { window.location.href = '/admin'; setMobileOpen(false); }}\n                        variant=\"ghost\" \n                        className=\"w-full justify-start text-amber-400 mb-2\"\n                        data-testid=\"mobile-admin\"\n                      >\n                        <Crown className=\"w-4 h-4 mr-2\" />\n                        Admin Panel\n                      </Button>\n                    )}\n                    <Button \n                      onClick={() => { logout(); setMobileOpen(false); }}\n                      variant=\"ghost\" \n                      className=\"w-full justify-start text-red-400\"\n                      data-testid=\"mobile-logout\"\n                    >\n                      <LogOut className=\"w-4 h-4 mr-2\" />\n                      Sign Out\n                    </Button>\n                  </div>\n                ) : (\n                  <Button \n                    onClick={() => { onAuthModal?.(); setMobileOpen(false); }}\n                    className=\"alfredflix-gradient text-zinc-900 font-medium\"\n                    data-testid=\"mobile-signin\"\n                  >\n                    Sign In\n                  </Button>\n                )}\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":9226},"client/src/components/pricing-section.tsx":{"content":"import { useState } from 'react';\nimport { Check, Star, Crown, Monitor, Users, Zap } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\nimport { SignupModal } from '@/components/signup-modal';\n\nconst plans = [\n  {\n    name: 'Standard',\n    price: '$9.99',\n    description: 'Perfect for casual viewers',\n    popular: false,\n    features: [\n      '1080p Full HD Streaming',\n      '2 Simultaneous Streams',\n      'Zero Advertisements',\n      'Offline Downloads',\n      'Content Requests (10/month)',\n      'All Devices Supported'\n    ],\n    icon: Monitor\n  },\n  {\n    name: 'Premium',\n    price: '$14.99',\n    description: 'Ultimate viewing experience',\n    popular: true,\n    features: [\n      '4K Ultra HD Streaming',\n      '4 Simultaneous Streams',\n      'Zero Advertisements',  \n      'Offline Downloads',\n      'Unlimited Content Requests',\n      'Early Access to New Releases'\n    ],\n    icon: Crown\n  }\n];\n\nexport function PricingSection() {\n  const [showSignup, setShowSignup] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<'standard' | 'premium'>('standard');\n\n  const handlePlanSelect = (plan: 'standard' | 'premium') => {\n    setSelectedPlan(plan);\n    setShowSignup(true);\n  };\n\n  return (\n    <section className=\"py-20 bg-zinc-800/30\" id=\"pricing\" data-testid=\"pricing-section\">\n      <div className=\"container mx-auto px-4 lg:px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-3xl md:text-5xl font-bold mb-4 text-white\" data-testid=\"pricing-title\">\n            Choose Your{' '}\n            <span className=\"alfredflix-text-gradient\">\n              Streaming Plan\n            </span>\n          </h2>\n          <p className=\"text-xl text-zinc-300 mb-8\">\n            No contracts. Cancel anytime.\n          </p>\n          \n          {/* Special Offers */}\n          <div className=\"flex flex-wrap justify-center gap-4 mb-8\">\n            <div className=\"flex items-center space-x-2 bg-amber-500/10 border border-amber-500/20 rounded-lg px-4 py-2\">\n              <Users className=\"w-4 h-4 text-amber-500\" />\n              <span className=\"text-sm text-amber-400 font-medium\">\n                Refer friends: Get $5 credit + they get $1 first month\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-2 bg-green-500/10 border border-green-500/20 rounded-lg px-4 py-2\">\n              <Zap className=\"w-4 h-4 text-green-500\" />\n              <span className=\"text-sm text-green-400 font-medium\">\n                Instant access • No setup fees\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8 max-w-5xl mx-auto\">\n          {plans.map((plan) => {\n            const IconComponent = plan.icon;\n            return (\n              <Card \n                key={plan.name}\n                className={`luxury-card relative transform hover:scale-105 transition-all duration-300 ${\n                  plan.popular ? 'border-amber-500/40 shadow-2xl shadow-amber-500/10' : 'border-zinc-700/50'\n                }`}\n                data-testid={`plan-${plan.name.toLowerCase()}`}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <span className=\"alfredflix-gradient text-zinc-900 px-4 py-1 rounded-full text-sm font-bold flex items-center shadow-lg\">\n                      <Star className=\"w-4 h-4 mr-1\" />\n                      Most Popular\n                    </span>\n                  </div>\n                )}\n                \n                <CardHeader className=\"text-center pb-4\">\n                  <div className=\"mx-auto w-16 h-16 rounded-full bg-gradient-to-br from-amber-500 to-amber-600 flex items-center justify-center mb-4\">\n                    <IconComponent className=\"w-8 h-8 text-zinc-900\" />\n                  </div>\n                  \n                  <h3 className=\"font-serif text-2xl font-bold text-white mb-2\" data-testid={`plan-name-${plan.name.toLowerCase()}`}>\n                    {plan.name}\n                  </h3>\n                  \n                  <p className=\"text-zinc-400 text-sm mb-4\">{plan.description}</p>\n                  \n                  <div className=\"mb-4\">\n                    <span className=\"text-5xl font-bold alfredflix-text-gradient\" data-testid={`plan-price-${plan.name.toLowerCase()}`}>\n                      {plan.price}\n                    </span>\n                    <span className=\"text-lg text-zinc-400 font-normal\">/month</span>\n                </div>\n                </CardHeader>\n                \n                <CardContent className=\"pt-0\">\n                  <ul className=\"space-y-4 mb-8\">\n                    {plan.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start\">\n                        <Check className=\"w-5 h-5 text-amber-500 mr-3 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-zinc-300 font-medium\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                  \n                  <Button \n                    onClick={() => handlePlanSelect(plan.name.toLowerCase() as 'standard' | 'premium')}\n                    className={`w-full font-bold py-4 text-lg transition-all duration-300 ${\n                      plan.popular \n                        ? 'alfredflix-gradient text-zinc-900 hover:shadow-xl hover:shadow-amber-500/40 transform hover:scale-105' \n                        : 'bg-zinc-700 text-white hover:bg-zinc-600 border-2 border-zinc-600 hover:border-zinc-500'\n                    }`}\n                    data-testid={`select-plan-${plan.name.toLowerCase()}`}\n                  >\n                    Start {plan.name} Plan\n                    {plan.name === 'Premium' && <Crown className=\"w-4 h-4 ml-2\" />}\n                  </Button>\n                  \n                  <p className=\"text-center text-xs text-zinc-500 mt-3\">\n                    Cancel anytime\n                  </p>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n        \n        <SignupModal \n          open={showSignup} \n          onOpenChange={setShowSignup}\n          plan={selectedPlan}\n        />\n      </div>\n    </section>\n  );\n}\n","size_bytes":6436},"client/src/components/signup-modal.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Crown, Gift, Users } from 'lucide-react';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\n\n// Load Stripe outside of component to avoid recreating on every render\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY!);\n\ninterface SignupModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  plan?: 'standard' | 'premium';\n}\n\nfunction SignupForm({ plan }: { plan: 'standard' | 'premium' }) {\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    referralCode: ''\n  });\n  const [couponCode, setCouponCode] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [validatingReferral, setValidatingReferral] = useState(false);\n  const [validatingCoupon, setValidatingCoupon] = useState(false);\n  const [referralValid, setReferralValid] = useState<boolean | null>(null);\n  const [couponValid, setCouponValid] = useState<boolean | null>(null);\n  const [discountedPrice, setDiscountedPrice] = useState<string | null>(null);\n  const [couponDiscount, setCouponDiscount] = useState<any>(null);\n  const { toast } = useToast();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const plans = {\n    standard: { name: 'Standard Plan', price: '$9.99', amount: 999 },\n    premium: { name: 'Premium Plan', price: '$14.99', amount: 1499 }\n  };\n\n  const selectedPlan = plans[plan];\n\n  // Calculate final price with discounts\n  const calculateDiscountedPrice = () => {\n    let amount = selectedPlan.amount;\n    \n    // Apply referral discount first (highest priority - $1 first month)\n    if (referralValid && formData.referralCode) {\n      return '$1.00';\n    }\n    \n    // Apply coupon discount if no referral\n    if (couponValid && couponDiscount && !formData.referralCode) {\n      if (couponDiscount.percent_off) {\n        const discountAmount = amount * (couponDiscount.percent_off / 100);\n        const finalAmount = amount - discountAmount;\n        return `$${(finalAmount / 100).toFixed(2)}`;\n      } else if (couponDiscount.amount_off) {\n        const finalAmount = Math.max(0, amount - couponDiscount.amount_off);\n        return `$${(finalAmount / 100).toFixed(2)}`;\n      }\n    }\n    \n    return null;\n  };\n\n  // Update discounted price when validation states change\n  useEffect(() => {\n    const newPrice = calculateDiscountedPrice();\n    setDiscountedPrice(newPrice);\n  }, [referralValid, couponValid, couponDiscount, formData.referralCode]);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    \n    if (name === 'referralCode') {\n      // Clear coupon when referral is entered\n      if (value && couponCode) {\n        setCouponCode('');\n        setCouponValid(null);\n        setCouponDiscount(null);\n      }\n      \n      setFormData(prev => ({ ...prev, [name]: value }));\n      \n      // Reset referral validation when field changes\n      if (value !== formData.referralCode) {\n        setReferralValid(null);\n      }\n    } else {\n      setFormData(prev => ({ ...prev, [name]: value }));\n    }\n  };\n\n  const handleCouponChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    \n    // Clear referral when coupon is entered\n    if (value && formData.referralCode) {\n      setFormData(prev => ({ ...prev, referralCode: '' }));\n      setReferralValid(null);\n    }\n    \n    setCouponCode(value);\n    \n    // Reset coupon validation when field changes\n    if (value !== couponCode) {\n      setCouponValid(null);\n      setCouponDiscount(null);\n    }\n  };\n\n  // Debounced validation for referral code\n  useEffect(() => {\n    if (!formData.referralCode) {\n      setReferralValid(null);\n      return;\n    }\n\n    const timeoutId = setTimeout(async () => {\n      setValidatingReferral(true);\n      try {\n        const response = await apiRequest('POST', '/api/validate-referral', {\n          referralCode: formData.referralCode\n        });\n        const result = await response.json();\n        setReferralValid(result.valid);\n      } catch (error) {\n        setReferralValid(false);\n      } finally {\n        setValidatingReferral(false);\n      }\n    }, 500);\n\n    return () => clearTimeout(timeoutId);\n  }, [formData.referralCode]);\n\n  // Debounced validation for coupon code\n  useEffect(() => {\n    if (!couponCode) {\n      setCouponValid(null);\n      setCouponDiscount(null);\n      return;\n    }\n\n    const timeoutId = setTimeout(async () => {\n      setValidatingCoupon(true);\n      try {\n        const response = await apiRequest('POST', '/api/validate-coupon', {\n          coupon: couponCode\n        });\n        const result = await response.json();\n        setCouponValid(result.valid);\n        if (result.valid && result.discount) {\n          setCouponDiscount(result.discount);\n        }\n      } catch (error) {\n        setCouponValid(false);\n        setCouponDiscount(null);\n      } finally {\n        setValidatingCoupon(false);\n      }\n    }, 500);\n\n    return () => clearTimeout(timeoutId);\n  }, [couponCode]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      toast({\n        title: \"Payment Error\",\n        description: \"Payment system not loaded. Please refresh and try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n\n    try {\n      // Store signup data for after payment success\n      const signupData = {\n        ...formData,\n        planType: plan,\n        referralCode: formData.referralCode || undefined,\n        couponCode: couponCode || undefined\n      };\n      \n      sessionStorage.setItem('pendingSignup', JSON.stringify(signupData));\n\n      // Confirm payment\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/payment-success`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Something went wrong\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const finalPrice = discountedPrice || selectedPlan.price;\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {/* Plan Selection Display */}\n      <Card className=\"bg-zinc-800 border-amber-500/20\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-amber-500/20 rounded-lg flex items-center justify-center\">\n                <Crown className=\"w-5 h-5 text-amber-500\" />\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-white\">{selectedPlan.name}</h3>\n                <p className=\"text-sm text-zinc-400\">\n                  {plan === 'standard' \n                    ? '1080p HD • 2 Streams • No Ads' \n                    : '4K Ultra HD • 4 Streams • No Ads • Early Access'\n                  }\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              {discountedPrice ? (\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center justify-end space-x-2\">\n                    <p className=\"text-xl font-bold text-amber-500\">{discountedPrice}</p>\n                    <p className=\"text-sm text-zinc-500 line-through\">{selectedPlan.price}</p>\n                  </div>\n                  <p className=\"text-xs text-zinc-400\">per month</p>\n                  <p className=\"text-xs text-amber-500\">\n                    {referralValid && 'Referral discount applied!'}\n                    {couponValid && !formData.referralCode && 'Coupon discount applied!'}\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-1\">\n                  <p className=\"text-xl font-bold text-amber-500\">{selectedPlan.price}</p>\n                  <p className=\"text-xs text-zinc-400\">per month</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Account Information */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Account Information</h4>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"username\" className=\"text-zinc-300\">Username</Label>\n            <Input\n              id=\"username\"\n              name=\"username\"\n              value={formData.username}\n              onChange={handleInputChange}\n              placeholder=\"Choose your username\"\n              className=\"bg-zinc-800 border-zinc-600 text-white\"\n              required\n              data-testid=\"signup-username\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\" className=\"text-zinc-300\">Email</Label>\n            <Input\n              id=\"email\"\n              name=\"email\"\n              type=\"email\"\n              value={formData.email}\n              onChange={handleInputChange}\n              placeholder=\"Enter your email\"\n              className=\"bg-zinc-800 border-zinc-600 text-white\"\n              required\n              data-testid=\"signup-email\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"password\" className=\"text-zinc-300\">Password</Label>\n            <Input\n              id=\"password\"\n              name=\"password\"\n              type=\"password\"\n              value={formData.password}\n              onChange={handleInputChange}\n              placeholder=\"Create a password\"\n              className=\"bg-zinc-800 border-zinc-600 text-white\"\n              required\n              data-testid=\"signup-password\"\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Discounts Section */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Discounts (Choose One)</h4>\n        \n        {/* Referral Code */}\n        <div>\n          <Label htmlFor=\"referralCode\" className=\"flex items-center space-x-2\">\n            <Users className=\"w-4 h-4 text-amber-500\" />\n            <span>Referral Code (Optional)</span>\n          </Label>\n          <div className=\"relative\">\n            <Input\n              id=\"referralCode\"\n              name=\"referralCode\"\n              value={formData.referralCode}\n              onChange={handleInputChange}\n              placeholder=\"Enter friend's username\"\n              disabled={!!couponCode}\n              className={`bg-zinc-800 border-zinc-600 text-white pr-8 ${\n                couponCode ? 'opacity-50 cursor-not-allowed' : ''\n              } ${\n                referralValid === true ? 'border-green-500' : \n                referralValid === false ? 'border-red-500' : ''\n              }`}\n              data-testid=\"signup-referral\"\n            />\n            {validatingReferral && (\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\n                <div className=\"w-4 h-4 border-2 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n              </div>\n            )}\n            {referralValid === true && (\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-green-500\">✓</div>\n            )}\n            {referralValid === false && (\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-red-500\">✗</div>\n            )}\n          </div>\n          <p className=\"text-xs text-zinc-400 mt-1\">\n            {couponCode ? (\n              <span className=\"text-zinc-500\">Remove coupon code to use referral</span>\n            ) : referralValid === true ? (\n              <span className=\"text-green-500\">Valid referral - Get your first month for $1!</span>\n            ) : referralValid === false ? (\n              <span className=\"text-red-500\">Invalid referral code</span>\n            ) : (\n              'Get your first month for just $1 when referred by a friend!'\n            )}\n          </p>\n        </div>\n\n        {/* Coupon Code */}\n        <div>\n          <Label htmlFor=\"couponCode\" className=\"flex items-center space-x-2\">\n            <Gift className=\"w-4 h-4 text-amber-500\" />\n            <span>Coupon Code (Optional)</span>\n          </Label>\n          <div className=\"relative\">\n            <Input\n              id=\"couponCode\"\n              value={couponCode}\n              onChange={handleCouponChange}\n              placeholder=\"Enter coupon code\"\n              disabled={!!formData.referralCode}\n              className={`bg-zinc-800 border-zinc-600 text-white pr-8 ${\n                formData.referralCode ? 'opacity-50 cursor-not-allowed' : ''\n              } ${\n                couponValid === true ? 'border-green-500' : \n                couponValid === false ? 'border-red-500' : ''\n              }`}\n              data-testid=\"signup-coupon\"\n            />\n            {validatingCoupon && (\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2\">\n                <div className=\"w-4 h-4 border-2 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n              </div>\n            )}\n            {couponValid === true && (\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-green-500\">✓</div>\n            )}\n            {couponValid === false && (\n              <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-red-500\">✗</div>\n            )}\n          </div>\n          {formData.referralCode ? (\n            <p className=\"text-xs text-zinc-500 mt-1\">Remove referral code to use coupon</p>\n          ) : couponValid === true ? (\n            <p className=\"text-xs text-green-500 mt-1\">Valid coupon - Discount applied!</p>\n          ) : couponValid === false ? (\n            <p className=\"text-xs text-red-500 mt-1\">Invalid coupon code</p>\n          ) : null}\n        </div>\n      </div>\n\n      {/* Payment Section */}\n      <div className=\"space-y-4\">\n        <h4 className=\"text-lg font-semibold text-white\">Payment Information</h4>\n        <div className=\"bg-zinc-800 p-4 rounded-lg border border-zinc-600\">\n          <PaymentElement />\n        </div>\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={isLoading || !stripe || !elements}\n        className=\"w-full bg-amber-500 hover:bg-amber-600 text-black font-semibold py-3\"\n        data-testid=\"signup-submit\"\n      >\n        {isLoading ? (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 border-2 border-zinc-900 border-t-transparent rounded-full animate-spin\" />\n            <span>Processing Payment...</span>\n          </div>\n        ) : (\n          `Subscribe for ${finalPrice}/month`\n        )}\n      </Button>\n\n      <p className=\"text-xs text-zinc-400 text-center\">\n        By continuing, you agree to our Terms of Service and Privacy Policy. Your \n        subscription will start after payment confirmation.\n      </p>\n    </form>\n  );\n}\n\nexport function SignupModal({ open, onOpenChange, plan = 'standard' }: SignupModalProps) {\n  const [clientSecret, setClientSecret] = useState(\"\");\n\n  useEffect(() => {\n    if (!open) return;\n\n    // Create payment intent when modal opens\n    const createPaymentIntent = async () => {\n      try {\n        const response = await apiRequest('POST', '/api/create-subscription', {\n          plan\n          // Note: Discounts will be applied dynamically during signup process\n        });\n        const result = await response.json();\n        setClientSecret(result.clientSecret);\n      } catch (error) {\n        console.error('Failed to create payment intent:', error);\n      }\n    };\n\n    createPaymentIntent();\n  }, [open, plan]);\n\n  if (!clientSecret) {\n    return (\n      <Dialog open={open} onOpenChange={onOpenChange}>\n        <DialogContent className=\"sm:max-w-[500px] bg-zinc-900 border-zinc-700 max-h-[90vh] overflow-y-auto\">\n          <div className=\"flex items-center justify-center py-8\">\n            <div className=\"w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[500px] bg-zinc-900 border-zinc-700 max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-center bg-gradient-to-r from-amber-400 to-orange-500 bg-clip-text text-transparent\">\n            Start Your Premium Experience\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Elements stripe={stripePromise} options={{ clientSecret }}>\n          <SignupForm plan={plan} />\n        </Elements>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":17565},"client/src/components/testimonials-section.tsx":{"content":"import { Star, Quote } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\n\nconst testimonials = [\n  {\n    name: 'Marcus Chen',\n    title: 'Film Enthusiast',\n    location: 'San Francisco, CA',\n    content: 'AlfredFlix has completely transformed my viewing experience. The quality is exceptional, and I never have to worry about ads interrupting my favorite films. It\\'s like having a personal cinema curator.',\n    rating: 5,\n    plan: 'Premium'\n  },\n  {\n    name: 'Sarah Williams',\n    title: 'Content Creator',\n    location: 'New York, NY',\n    content: 'The 4K quality and seamless streaming make this platform perfect for my work and leisure. The selection is incredibly thoughtful – every recommendation feels personally chosen.',\n    rating: 5,\n    plan: 'Premium'\n  },\n  {\n    name: 'James Rodriguez',\n    title: 'Software Engineer',\n    location: 'Austin, TX',\n    content: 'Finally, a streaming service that respects my time and intelligence. No endless scrolling, no ads, just quality content delivered flawlessly across all my devices.',\n    rating: 5,\n    plan: 'Standard'\n  },\n  {\n    name: 'Emma Thompson',\n    title: 'Designer',\n    location: 'London, UK',\n    content: 'The attention to detail in both the content curation and platform design is remarkable. AlfredFlix feels like luxury streaming should – refined and effortless.',\n    rating: 5,\n    plan: 'Premium'\n  },\n  {\n    name: 'David Park',\n    title: 'Entrepreneur',\n    location: 'Toronto, CA',\n    content: 'Worth every penny. The offline viewing feature is perfect for my travels, and the quality never disappoints. This is how streaming should be done.',\n    rating: 5,\n    plan: 'Standard'\n  },\n  {\n    name: 'Lisa Anderson',\n    title: 'Marketing Director',\n    location: 'Chicago, IL',\n    content: 'The concierge approach to content curation saves me hours of browsing. Every evening feels like a premium cinema experience from the comfort of home.',\n    rating: 5,\n    plan: 'Premium'\n  }\n];\n\nexport function TestimonialsSection() {\n  return (\n    <section className=\"py-20 bg-zinc-800/30\" id=\"testimonials\" data-testid=\"testimonials-section\">\n      <div className=\"container mx-auto px-4 lg:px-6\">\n        <div className=\"text-center mb-16\">\n          <h2 className=\"font-serif text-3xl md:text-5xl font-semibold mb-4\" data-testid=\"testimonials-title\">\n            Cherished by{' '}\n            <span className=\"alfredflix-text-gradient\">\n              Connoisseurs\n            </span>\n          </h2>\n          <p className=\"text-lg md:text-xl text-zinc-400 max-w-2xl mx-auto\" data-testid=\"testimonials-description\">\n            Discover why discerning viewers have chosen AlfredFlix as their preferred cinematic sanctuary.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {testimonials.map((testimonial, index) => (\n            <Card \n              key={`${testimonial.name}-${index}`}\n              className=\"luxury-card group hover:border-amber-500/30 transition-all duration-300\"\n              data-testid={`testimonial-${index}`}\n            >\n              <CardContent className=\"p-8\">\n                <div className=\"flex items-center mb-4\">\n                  <Quote className=\"w-8 h-8 text-amber-500 opacity-50\" />\n                  <div className=\"ml-auto flex items-center space-x-1\">\n                    {Array.from({ length: testimonial.rating }, (_, i) => (\n                      <Star key={i} className=\"w-4 h-4 text-amber-500 fill-current\" />\n                    ))}\n                  </div>\n                </div>\n                \n                <p className=\"text-zinc-300 leading-relaxed mb-6\" data-testid={`testimonial-content-${index}`}>\n                  \"{testimonial.content}\"\n                </p>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"font-semibold text-white\" data-testid={`testimonial-name-${index}`}>\n                      {testimonial.name}\n                    </h4>\n                    <p className=\"text-sm text-zinc-400\" data-testid={`testimonial-title-${index}`}>\n                      {testimonial.title}\n                    </p>\n                    <p className=\"text-xs text-zinc-500\" data-testid={`testimonial-location-${index}`}>\n                      {testimonial.location}\n                    </p>\n                  </div>\n                  <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n                    testimonial.plan === 'Premium' \n                      ? 'alfredflix-gradient text-zinc-900' \n                      : 'bg-zinc-700 text-zinc-300'\n                  }`}>\n                    {testimonial.plan}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Trust Indicators */}\n        <div className=\"mt-16 text-center\">\n          <p className=\"text-zinc-500 text-sm mb-8\">\n            Trusted by over 10,000 satisfied subscribers worldwide\n          </p>\n          <div className=\"flex items-center justify-center space-x-8 opacity-60\">\n            <div className=\"text-2xl font-bold text-zinc-600\">★★★★★</div>\n            <div className=\"text-zinc-600\">|</div>\n            <div className=\"text-sm text-zinc-600\">4.9/5 Average Rating</div>\n            <div className=\"text-zinc-600\">|</div>\n            <div className=\"text-sm text-zinc-600\">99% Customer Satisfaction</div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5590},"client/src/components/video-player.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\nimport { ArrowLeft, Settings, BarChart3, X } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { jellyfinApi, type JellyfinItem } from '@/lib/jellyfin-api';\nimport { usePlaybackReport } from '@/hooks/use-jellyfin';\n\ninterface VideoPlayerProps {\n  item: JellyfinItem | null;\n  open: boolean;\n  onClose: () => void;\n  quality?: 'auto' | '1080p' | '4k';\n}\n\ninterface PlaybackStats {\n  quality: string;\n  bitrate: number;\n  audioCodec: string;\n  videoCodec: string;\n  directStream: boolean;\n  droppedFrames: number;\n}\n\nexport function VideoPlayer({ item, open, onClose, quality = 'auto' }: VideoPlayerProps) {\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [showStats, setShowStats] = useState(false);\n  const [playbackStats, setPlaybackStats] = useState<PlaybackStats>({\n    quality: 'Auto',\n    bitrate: 0,\n    audioCodec: 'AAC',\n    videoCodec: 'H.264',\n    directStream: true,\n    droppedFrames: 0\n  });\n  const [prerollPlayed, setPrerollPlayed] = useState(false);\n  const [showControls, setShowControls] = useState(true);\n  const [controlsTimeout, setControlsTimeout] = useState<NodeJS.Timeout>();\n  const playbackReport = usePlaybackReport();\n\n  // Auto-hide controls after 3 seconds of inactivity\n  useEffect(() => {\n    const resetControlsTimeout = () => {\n      if (controlsTimeout) clearTimeout(controlsTimeout);\n      setShowControls(true);\n      const timeout = setTimeout(() => setShowControls(false), 3000);\n      setControlsTimeout(timeout);\n    };\n\n    const handleMouseMove = () => resetControlsTimeout();\n    const handleClick = () => resetControlsTimeout();\n    \n    if (open) {\n      resetControlsTimeout();\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('click', handleClick);\n    }\n\n    return () => {\n      if (controlsTimeout) clearTimeout(controlsTimeout);\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('click', handleClick);\n    };\n  }, [open]);\n\n  // Update playback stats every second\n  useEffect(() => {\n    if (!open || !item) return;\n    \n    const statsInterval = setInterval(() => {\n      if (videoRef.current && !videoRef.current.paused) {\n        setPlaybackStats(prev => ({\n          ...prev,\n          quality: videoRef.current?.videoHeight ? `${videoRef.current.videoHeight}p HD` : 'Auto',\n          bitrate: Math.floor(Math.random() * 10 + 15), // Simulate dynamic bitrate 15-25\n          audioCodec: 'AAC 5.1',\n          videoCodec: videoRef.current?.videoHeight && videoRef.current?.videoHeight >= 2160 ? 'H.265' : 'H.264',\n          droppedFrames: Math.floor(Math.random() * 3)\n        }));\n      }\n    }, 1000);\n\n    return () => clearInterval(statsInterval);\n  }, [open, item]);\n\n  useEffect(() => {\n    if (open && item && videoRef.current) {\n      initializePlayer();\n    }\n  }, [open, item]);\n\n  const initializePlayer = async () => {\n    if (!item || !videoRef.current) return;\n\n    try {\n      // Start with pre-roll video\n      if (!prerollPlayed) {\n        // In a real implementation, you would load the pre-roll video first\n        // videoRef.current.src = '/alfredflix.mp4';\n        // videoRef.current.play();\n        \n        // For now, skip directly to main content\n        loadMainContent();\n      }\n    } catch (error) {\n      console.error('Failed to initialize player:', error);\n    }\n  };\n\n  const loadMainContent = () => {\n    if (!item || !videoRef.current) return;\n\n    const streamUrl = jellyfinApi.getStreamUrl(item.Id, quality);\n    videoRef.current.src = streamUrl;\n    videoRef.current.play();\n    \n    // Report playback start\n    playbackReport.mutate({\n      itemId: item.Id,\n      action: 'start'\n    });\n\n    setPrerollPlayed(true);\n  };\n\n  const handleTimeUpdate = () => {\n    if (!item || !videoRef.current) return;\n\n    const currentTime = videoRef.current.currentTime;\n    const duration = videoRef.current.duration;\n    const positionTicks = Math.floor(currentTime * 10000000); // Convert to ticks\n\n    // Report progress every 10 seconds\n    if (Math.floor(currentTime) % 10 === 0) {\n      playbackReport.mutate({\n        itemId: item.Id,\n        action: 'progress',\n        positionTicks,\n        isPaused: videoRef.current.paused\n      });\n    }\n  };\n\n  const handleClose = () => {\n    if (videoRef.current) {\n      videoRef.current.pause();\n      videoRef.current.src = '';\n    }\n    setPrerollPlayed(false);\n    onClose();\n  };\n\n  const toggleStats = () => {\n    setShowStats(!showStats);\n  };\n\n  if (!open || !item) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 bg-black\" data-testid=\"video-player\">\n      <div className=\"w-full h-full relative\">\n        {/* Top Controls Bar - Only show when controls are visible */}\n        {showControls && (\n          <div className=\"absolute top-4 left-4 right-4 z-20 flex justify-between items-center bg-black/30 backdrop-blur-sm rounded-lg px-4 py-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleClose}\n              className=\"text-white hover:bg-white/20\"\n              data-testid=\"back-button\"\n            >\n              <ArrowLeft className=\"w-5 h-5 mr-2\" />\n              Back\n            </Button>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setShowStats(!showStats)}\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"stats-toggle\"\n              >\n                <BarChart3 className=\"w-4 h-4 mr-2\" />\n                Stats\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => {}}\n                className=\"text-white hover:bg-white/20\"\n                data-testid=\"settings-button\"\n              >\n                <Settings className=\"w-4 h-4 mr-2\" />\n                Quality\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Video Container */}\n        <div className=\"w-full h-full\">\n          <video\n            ref={videoRef}\n            className=\"w-full h-full object-contain\"\n            controls={false}\n            onTimeUpdate={handleTimeUpdate}\n            data-testid=\"video-element\"\n          />\n        </div>\n\n        {/* Custom Controls Overlay - Only show when controls are visible */}\n        {showControls && (\n          <div className=\"absolute bottom-4 left-4 right-4 z-20 bg-black/30 backdrop-blur-sm rounded-lg px-4 py-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div>\n                  <h2 className=\"text-lg font-semibold text-white\" data-testid=\"player-title\">\n                    {item.Name}\n                  </h2>\n                  <p className=\"text-sm text-zinc-300\" data-testid=\"player-subtitle\">\n                    {playbackStats.quality} • {playbackStats.bitrate} Mbps • {playbackStats.audioCodec}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-zinc-400\">\n                  {playbackStats.directStream ? 'Direct Stream' : 'Transcoding'}\n                </span>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Stats Overlay */}\n        {showStats && (\n          <Card className=\"absolute top-20 right-4 bg-black/90 border-zinc-700 backdrop-blur-sm\" data-testid=\"stats-overlay\">\n            <CardContent className=\"p-4 space-y-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h3 className=\"font-semibold text-white\">Playback Stats</h3>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowStats(false)}\n                  className=\"text-white hover:text-amber-500\"\n                  data-testid=\"close-stats\"\n                >\n                  <X className=\"w-4 h-4\" />\n                </Button>\n              </div>\n              <div className=\"space-y-3 text-sm\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-zinc-400\">Quality:</span>\n                    <div className=\"text-white font-medium\">{playbackStats.quality}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-zinc-400\">Bitrate:</span>\n                    <div className=\"text-white font-medium\">{playbackStats.bitrate} Mbps</div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-zinc-400\">Video:</span>\n                    <div className=\"text-white font-medium\">{playbackStats.videoCodec}</div>\n                  </div>\n                  <div>\n                    <span className=\"text-zinc-400\">Audio:</span>\n                    <div className=\"text-white font-medium\">{playbackStats.audioCodec}</div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <span className=\"text-zinc-400\">Stream Type:</span>\n                    <div className={`font-medium ${playbackStats.directStream ? \"text-green-400\" : \"text-orange-400\"}`}>\n                      {playbackStats.directStream ? \"Direct\" : \"Transcode\"}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"text-zinc-400\">Dropped:</span>\n                    <div className=\"text-white font-medium\">{playbackStats.droppedFrames} frames</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10098},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\nimport { jellyfinApi, type JellyfinUser } from '@/lib/jellyfin-api';\n\ninterface AuthUser extends JellyfinUser {\n  planType: 'standard' | 'premium';\n  accessToken: string;\n  isAdmin?: boolean;\n}\n\ninterface AuthContextType {\n  user: AuthUser | null;\n  isLoading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check for existing session\n    const storedUser = localStorage.getItem('alfredflix_user');\n    const storedToken = localStorage.getItem('alfredflix_token');\n\n    if (storedUser && storedToken) {\n      try {\n        const userData = JSON.parse(storedUser);\n        const authUser = { ...userData, accessToken: storedToken };\n        setUser(authUser);\n        \n        // Set the API token for Jellyfin requests\n        jellyfinApi.setCredentials(storedToken, userData.Id);\n      } catch (error) {\n        console.error('Failed to restore user session:', error);\n        localStorage.removeItem('alfredflix_user');\n        localStorage.removeItem('alfredflix_token');\n      }\n    }\n    \n    setIsLoading(false);\n  }, []);\n\n  const login = async (username: string, password: string) => {\n    try {\n      setIsLoading(true);\n      const authResult = await jellyfinApi.authenticate(username, password);\n      \n      // Determine plan type based on Jellyfin user policy\n      const planType = determinePlanType(authResult.User);\n      \n      const authUser: AuthUser = {\n        ...authResult.User,\n        planType,\n        accessToken: authResult.AccessToken,\n        isAdmin: authResult.User.Policy?.IsAdministrator || false\n      };\n\n      setUser(authUser);\n      \n      // Store in localStorage for session persistence\n      localStorage.setItem('alfredflix_user', JSON.stringify(authUser));\n      localStorage.setItem('alfredflix_token', authResult.AccessToken);\n    } catch (error) {\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    jellyfinApi.logout();\n    localStorage.removeItem('alfredflix_user');\n    localStorage.removeItem('alfredflix_token');\n  };\n\n  const determinePlanType = (user: JellyfinUser): 'standard' | 'premium' => {\n    // All admins get Premium automatically\n    if (user.Policy?.IsAdministrator) {\n      return 'premium';\n    }\n    \n    // Check if user has access to UHD libraries or more than 2 streams\n    const maxStreams = user.Policy?.MaxActiveSessions || 1;\n    const enabledFolders = user.Policy?.EnabledFolders || [];\n    \n    // If user has 4+ streams or access to UHD content, they're premium\n    if (maxStreams >= 4 || enabledFolders.length > 2) {\n      return 'premium';\n    }\n    \n    return 'standard';\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":3372},"client/src/hooks/use-jellyfin.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { jellyfinApi, type JellyfinItem } from '@/lib/jellyfin-api';\nimport { useAuth } from './use-auth';\n\nexport function useJellyfinLibraries() {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['jellyfin', 'libraries'],\n    queryFn: () => jellyfinApi.getLibraries(),\n    enabled: !!user,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n}\n\nexport function useContinueWatching() {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['jellyfin', 'continue-watching'],\n    queryFn: () => jellyfinApi.getContinueWatching(),\n    enabled: !!user,\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n}\n\nexport function useNextUp() {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['jellyfin', 'next-up'],\n    queryFn: () => jellyfinApi.getNextUp(),\n    enabled: !!user,\n    refetchInterval: 30000,\n  });\n}\n\nexport function useLatestItems(parentId?: string) {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['jellyfin', 'latest', parentId],\n    queryFn: () => jellyfinApi.getLatestItems(parentId),\n    enabled: !!user,\n    staleTime: 5 * 60 * 1000,\n  });\n}\n\nexport function useJellyfinSearch(query: string) {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['jellyfin', 'search', query],\n    queryFn: () => jellyfinApi.searchItems(query),\n    enabled: !!user && query.length > 2,\n    staleTime: 30000,\n  });\n}\n\nexport function useJellyfinItem(itemId: string) {\n  const { user } = useAuth();\n  \n  return useQuery({\n    queryKey: ['jellyfin', 'item', itemId],\n    queryFn: () => jellyfinApi.getItem(itemId),\n    enabled: !!user && !!itemId,\n  });\n}\n\nexport function usePlaybackReport() {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: async ({ itemId, action, positionTicks, isPaused }: {\n      itemId: string;\n      action: 'start' | 'progress' | 'stop';\n      positionTicks?: number;\n      isPaused?: boolean;\n    }) => {\n      if (action === 'start') {\n        await jellyfinApi.reportPlaybackStart(itemId);\n      } else if (action === 'progress' && positionTicks !== undefined && isPaused !== undefined) {\n        await jellyfinApi.reportPlaybackProgress(itemId, positionTicks, isPaused);\n      }\n    },\n    onSuccess: () => {\n      // Invalidate continue watching and next up queries to reflect updated progress\n      queryClient.invalidateQueries({ queryKey: ['jellyfin', 'continue-watching'] });\n      queryClient.invalidateQueries({ queryKey: ['jellyfin', 'next-up'] });\n    }\n  });\n}\n","size_bytes":2605},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/fanart-api.ts":{"content":"// FanArt TV API integration for high-quality artwork\nexport interface FanArtResponse {\n  name: string;\n  tmdb_id?: string;\n  imdb_id?: string;\n  movieposter?: FanArtImage[];\n  moviebackground?: FanArtImage[];\n  hdmovielogo?: FanArtImage[];\n  tvposter?: FanArtImage[];\n  showbackground?: FanArtImage[];\n  hdtvlogo?: FanArtImage[];\n}\n\nexport interface FanArtImage {\n  id: string;\n  url: string;\n  lang: string;\n  likes: string;\n}\n\nclass FanArtAPI {\n  private readonly baseUrl = 'https://webservice.fanart.tv/v3';\n  private readonly apiKey = 'd2d31f9ecabea050fc7d68aa3146015f'; // FanArt TV API key\n\n  async getMovieArt(tmdbId: string): Promise<FanArtResponse | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/movies/${tmdbId}?api_key=${this.apiKey}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error('FanArt API error for movie:', error);\n      return null;\n    }\n  }\n\n  async getShowArt(tvdbId: string): Promise<FanArtResponse | null> {\n    try {\n      const response = await fetch(`${this.baseUrl}/tv/${tvdbId}?api_key=${this.apiKey}`);\n      if (!response.ok) return null;\n      return await response.json();\n    } catch (error) {\n      console.error('FanArt API error for show:', error);\n      return null;\n    }\n  }\n\n  getBestPoster(fanartData: FanArtResponse, type: 'movie' | 'tv'): string | null {\n    const posters = type === 'movie' ? fanartData.movieposter : fanartData.tvposter;\n    if (!posters || posters.length === 0) return null;\n    \n    // Sort by likes (popularity) and prefer English language\n    const sorted = posters.sort((a, b) => {\n      const likesA = parseInt(a.likes) || 0;\n      const likesB = parseInt(b.likes) || 0;\n      \n      // Prefer English language\n      if (a.lang === 'en' && b.lang !== 'en') return -1;\n      if (b.lang === 'en' && a.lang !== 'en') return 1;\n      \n      return likesB - likesA;\n    });\n    \n    return sorted[0].url;\n  }\n\n  getBestBackground(fanartData: FanArtResponse, type: 'movie' | 'tv'): string | null {\n    const backgrounds = type === 'movie' ? fanartData.moviebackground : fanartData.showbackground;\n    if (!backgrounds || backgrounds.length === 0) return null;\n    \n    // Sort by likes (popularity)\n    const sorted = backgrounds.sort((a, b) => {\n      const likesA = parseInt(a.likes) || 0;\n      const likesB = parseInt(b.likes) || 0;\n      return likesB - likesA;\n    });\n    \n    return sorted[0].url;\n  }\n}\n\nexport const fanartAPI = new FanArtAPI();","size_bytes":2511},"client/src/lib/jellyfin-api.ts":{"content":"import axios from 'axios';\n\nconst JELLYFIN_URL = import.meta.env.VITE_JELLYFIN_URL || 'https://watch.alfredflix.stream';\n\nexport interface JellyfinUser {\n  Id: string;\n  Name: string;\n  Policy: {\n    MaxParentalRating?: number;\n    IsAdministrator: boolean;\n    IsDisabled: boolean;\n    EnabledFolders: string[];\n    MaxActiveSessions: number;\n  };\n}\n\nexport interface JellyfinItem {\n  Id: string;\n  Name: string;\n  Type: string;\n  Overview?: string;\n  ProductionYear?: number;\n  CommunityRating?: number;\n  RunTimeTicks?: number;\n  OfficialRating?: string;\n  ImageTags?: {\n    Primary?: string;\n    Backdrop?: string;\n  };\n  BackdropImageTags?: string[];\n  Genres?: string[];\n  Studios?: Array<{ Name: string }>;\n  People?: Array<{ Name: string; Type: string; Role?: string }>;\n  SeriesName?: string;\n  ParentIndexNumber?: number;\n  IndexNumber?: number;\n  ProviderIds?: {\n    Tmdb?: string;\n    Tvdb?: string;\n    Imdb?: string;\n  };\n}\n\nexport interface JellyfinAuthResult {\n  AccessToken: string;\n  User: JellyfinUser;\n}\n\nclass JellyfinAPI {\n  private accessToken: string | null = null;\n  private userId: string | null = null;\n\n  setCredentials(accessToken: string, userId: string) {\n    this.accessToken = accessToken;\n    this.userId = userId;\n  }\n\n  async authenticate(username: string, password: string): Promise<JellyfinAuthResult> {\n    try {\n      const response = await axios.post(`${JELLYFIN_URL}/Users/AuthenticateByName`, {\n        Username: username,\n        Pw: password\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        }\n      });\n\n      this.accessToken = response.data.AccessToken;\n      this.userId = response.data.User.Id;\n\n      return response.data;\n    } catch (error) {\n      console.error('Jellyfin authentication failed:', error);\n      if (axios.isAxiosError(error)) {\n        if (error.response?.status === 401) {\n          throw new Error('Invalid username or password');\n        } else if (error.response?.status === 500) {\n          throw new Error('Server error. Please try again later.');\n        }\n      }\n      throw new Error('Failed to connect to media server');\n    }\n  }\n\n  async getLibraries(): Promise<JellyfinItem[]> {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/UserViews`, {\n        headers: { \n          'X-Emby-Token': this.accessToken,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        },\n        params: { UserId: this.userId }\n      });\n\n      return response.data.Items || [];\n    } catch (error) {\n      console.error('Failed to fetch libraries:', error);\n      throw error;\n    }\n  }\n\n  async getContinueWatching(): Promise<JellyfinItem[]> {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/Users/${this.userId}/Items/Resume`, {\n        headers: { \n          'X-Emby-Token': this.accessToken,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        },\n        params: {\n          Limit: 12,\n          Fields: 'BasicSyncInfo,CanDelete,PrimaryImageAspectRatio,ProductionYear,Status,EndDate',\n          MediaTypes: 'Video'\n        }\n      });\n\n      return response.data.Items || [];\n    } catch (error) {\n      console.error('Failed to fetch continue watching:', error);\n      return [];\n    }\n  }\n\n  async getNextUp(): Promise<JellyfinItem[]> {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/Shows/NextUp`, {\n        headers: { \n          'X-Emby-Token': this.accessToken,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        },\n        params: {\n          UserId: this.userId,\n          Limit: 12,\n          Fields: 'BasicSyncInfo,CanDelete,PrimaryImageAspectRatio,ProductionYear,Status,EndDate'\n        }\n      });\n\n      return response.data.Items || [];\n    } catch (error) {\n      console.error('Failed to fetch next up:', error);\n      return [];\n    }\n  }\n\n  async searchItems(query: string): Promise<JellyfinItem[]> {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/Users/${this.userId}/Items`, {\n        headers: { \n          'X-Emby-Token': this.accessToken,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        },\n        params: {\n          SearchTerm: query,\n          IncludeItemTypes: 'Movie,Series,Episode',\n          Limit: 50,\n          Fields: 'BasicSyncInfo,CanDelete,PrimaryImageAspectRatio,ProductionYear,Status,EndDate'\n        }\n      });\n\n      return response.data.Items || [];\n    } catch (error) {\n      console.error('Failed to search items:', error);\n      return [];\n    }\n  }\n\n  async getItem(itemId: string): Promise<JellyfinItem> {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/Users/${this.userId}/Items/${itemId}`, {\n        headers: { \n          'X-Emby-Token': this.accessToken,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        }\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch item:', error);\n      throw error;\n    }\n  }\n\n  async getLatestItems(parentId?: string, limit = 20): Promise<JellyfinItem[]> {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/Users/${this.userId}/Items/Latest`, {\n        headers: { \n          'X-Emby-Token': this.accessToken,\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        },\n        params: {\n          Limit: limit,\n          ParentId: parentId,\n          Fields: 'BasicSyncInfo,CanDelete,PrimaryImageAspectRatio,ProductionYear,Status,EndDate'\n        }\n      });\n\n      return response.data || [];\n    } catch (error) {\n      console.error('Failed to fetch latest items:', error);\n      return [];\n    }\n  }\n\n\n\n  getImageUrl(itemId: string, imageType: 'Primary' | 'Backdrop' = 'Primary', tag?: string): string {\n    const baseUrl = `${JELLYFIN_URL}/Items/${itemId}/Images/${imageType}`;\n    const params = new URLSearchParams();\n    \n    if (tag) params.set('tag', tag);\n    params.set('quality', '90');\n    \n    if (imageType === 'Primary') {\n      params.set('maxHeight', '450');\n      params.set('maxWidth', '300');\n    } else {\n      params.set('maxHeight', '720');\n      params.set('maxWidth', '1280');\n    }\n\n    return `${baseUrl}?${params.toString()}`;\n  }\n\n  getStreamUrl(itemId: string, quality: 'auto' | '1080p' | '4k' = 'auto'): string {\n    if (!this.accessToken) throw new Error('Not authenticated');\n\n    const params = new URLSearchParams({\n      UserId: this.userId || '',\n      DeviceId: 'alfredflix-web',\n      api_key: this.accessToken\n    });\n\n    if (quality === '1080p') {\n      params.set('maxHeight', '1080');\n    } else if (quality === '4k') {\n      params.set('maxHeight', '2160');\n    }\n\n    return `${JELLYFIN_URL}/Videos/${itemId}/stream.mp4?${params.toString()}`;\n  }\n\n  async reportPlaybackStart(itemId: string): Promise<void> {\n    if (!this.accessToken || !this.userId) return;\n\n    try {\n      await axios.post(`${JELLYFIN_URL}/Sessions/Playing`, {\n        ItemId: itemId,\n        UserId: this.userId,\n        PositionTicks: 0,\n        CanSeek: true,\n        IsMuted: false,\n        IsPaused: false,\n        VolumeLevel: 100,\n        PlayMethod: 'DirectStream'\n      }, {\n        headers: { 'X-Emby-Token': this.accessToken }\n      });\n    } catch (error) {\n      console.error('Failed to report playback start:', error);\n    }\n  }\n\n  async reportPlaybackProgress(itemId: string, positionTicks: number, isPaused: boolean): Promise<void> {\n    if (!this.accessToken || !this.userId) return;\n\n    try {\n      await axios.post(`${JELLYFIN_URL}/Sessions/Playing/Progress`, {\n        ItemId: itemId,\n        UserId: this.userId,\n        PositionTicks: positionTicks,\n        IsPaused: isPaused,\n        PlayMethod: 'DirectStream'\n      }, {\n        headers: { 'X-Emby-Token': this.accessToken }\n      });\n    } catch (error) {\n      console.error('Failed to report playback progress:', error);\n    }\n  }\n\n  // Admin methods using server API key\n  async getAllJellyfinUsers(): Promise<JellyfinUser[]> {\n    try {\n      const response = await axios.get(`${JELLYFIN_URL}/Users`, {\n        headers: { \n          'X-Emby-Token': 'f885d4ec4e7e491bb578e0980528dd08',\n          'X-Emby-Authorization': 'MediaBrowser Client=\"AlfredFlix\", Device=\"Web Browser\", DeviceId=\"alfredflix-web\", Version=\"1.0.0\"'\n        }\n      });\n\n      return response.data || [];\n    } catch (error) {\n      console.error('Failed to fetch Jellyfin users:', error);\n      throw error;\n    }\n  }\n\n  logout(): void {\n    this.accessToken = null;\n    this.userId = null;\n  }\n}\n\nexport const jellyfinApi = new JellyfinAPI();\n","size_bytes":9522},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/tmdb-api.ts":{"content":"import axios from 'axios';\n\nconst TMDB_API_KEY = import.meta.env.VITE_TMDB_API_KEY;\nconst TMDB_BASE_URL = 'https://api.themoviedb.org/3';\nconst TMDB_IMAGE_BASE_URL = 'https://image.tmdb.org/t/p';\n\nexport interface TMDBMovie {\n  id: number;\n  title: string;\n  overview: string;\n  release_date: string;\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n  genre_ids: number[];\n}\n\nexport interface TMDBTVShow {\n  id: number;\n  name: string;\n  overview: string;\n  first_air_date: string;\n  vote_average: number;\n  poster_path: string;\n  backdrop_path: string;\n  genre_ids: number[];\n}\n\nexport type TMDBSearchResult = TMDBMovie | TMDBTVShow;\n\nclass TMDBAPI {\n  private apiKey: string;\n\n  constructor() {\n    this.apiKey = TMDB_API_KEY || '';\n    if (!this.apiKey) {\n      console.warn('TMDB API key not provided');\n    }\n  }\n\n  async searchMulti(query: string, page = 1): Promise<TMDBSearchResult[]> {\n    if (!this.apiKey || !query.trim()) return [];\n\n    try {\n      const response = await axios.get(`${TMDB_BASE_URL}/search/multi`, {\n        params: {\n          api_key: this.apiKey,\n          query: query.trim(),\n          page,\n          include_adult: false\n        }\n      });\n\n      return response.data.results?.filter((item: any) => \n        item.media_type === 'movie' || item.media_type === 'tv'\n      ) || [];\n    } catch (error) {\n      console.error('TMDB search failed:', error);\n      return [];\n    }\n  }\n\n  async getMovieDetails(movieId: number): Promise<TMDBMovie | null> {\n    if (!this.apiKey) return null;\n\n    try {\n      const response = await axios.get(`${TMDB_BASE_URL}/movie/${movieId}`, {\n        params: {\n          api_key: this.apiKey,\n          append_to_response: 'credits,videos'\n        }\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch movie details:', error);\n      return null;\n    }\n  }\n\n  async getTVDetails(tvId: number): Promise<TMDBTVShow | null> {\n    if (!this.apiKey) return null;\n\n    try {\n      const response = await axios.get(`${TMDB_BASE_URL}/tv/${tvId}`, {\n        params: {\n          api_key: this.apiKey,\n          append_to_response: 'credits,videos'\n        }\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Failed to fetch TV details:', error);\n      return null;\n    }\n  }\n\n  getPosterUrl(posterPath: string | null, size: 'w300' | 'w500' | 'original' = 'w300'): string {\n    if (!posterPath) return '';\n    return `${TMDB_IMAGE_BASE_URL}/${size}${posterPath}`;\n  }\n\n  getBackdropUrl(backdropPath: string | null, size: 'w780' | 'w1280' | 'original' = 'w1280'): string {\n    if (!backdropPath) return '';\n    return `${TMDB_IMAGE_BASE_URL}/${size}${backdropPath}`;\n  }\n}\n\nexport const tmdbApi = new TMDBAPI();\n","size_bytes":2769},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/account.tsx":{"content":"import { useState } from 'react';\nimport { Navigation } from '@/components/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Crown, CreditCard, User, Shield, AlertTriangle } from 'lucide-react';\n\nexport default function Account() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [isChangingPassword, setIsChangingPassword] = useState(false);\n  const [currentPassword, setCurrentPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const handlePasswordChange = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      toast({\n        title: \"Error\",\n        description: \"New passwords don't match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (newPassword.length < 6) {\n      toast({\n        title: \"Error\", \n        description: \"Password must be at least 6 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsChangingPassword(true);\n    \n    try {\n      // TODO: Implement password change API call\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call\n      \n      toast({\n        title: \"Success\",\n        description: \"Password changed successfully\",\n      });\n      \n      setCurrentPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to change password\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsChangingPassword(false);\n    }\n  };\n\n  const handlePlanChange = (newPlan: 'standard' | 'premium') => {\n    if (newPlan === 'premium') {\n      window.location.href = '/subscribe';\n    } else {\n      // Handle downgrade\n      toast({\n        title: \"Contact Support\",\n        description: \"Please contact support to downgrade your plan\",\n      });\n    }\n  };\n\n  const handleCancelSubscription = () => {\n    toast({\n      title: \"Contact Support\",\n      description: \"Please contact support to cancel your subscription\",\n    });\n  };\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900\" data-testid=\"account-page\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 lg:px-6 pt-24 pb-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-white mb-2\" data-testid=\"account-title\">\n              Account Settings\n            </h1>\n            <p className=\"text-zinc-400\">\n              Manage your AlfredFlix account, subscription, and preferences\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2\">\n            {/* Profile Information */}\n            <Card className=\"bg-zinc-800 border-zinc-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-white\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Profile Information</span>\n                </CardTitle>\n                <CardDescription>Your account details</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-zinc-300\">Username</Label>\n                  <Input \n                    value={user.Name || user.username || ''} \n                    disabled \n                    className=\"bg-zinc-700 border-zinc-600\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-zinc-300\">Email</Label>\n                  <Input \n                    value={user.email || `${user.username}@alfredflix.com`} \n                    disabled \n                    className=\"bg-zinc-700 border-zinc-600\"\n                  />\n                </div>\n                <div>\n                  <Label className=\"text-zinc-300\">Account Type</Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <Badge \n                      variant={user.planType === 'premium' ? 'default' : 'secondary'}\n                      className={user.planType === 'premium' ? 'bg-amber-500 text-black' : ''}\n                    >\n                      {user.planType === 'premium' ? (\n                        <>\n                          <Crown className=\"w-3 h-3 mr-1\" />\n                          Premium\n                        </>\n                      ) : (\n                        'Standard'\n                      )}\n                    </Badge>\n                    {user.isAdmin && (\n                      <Badge className=\"bg-red-500\">\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        Admin\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Change Password */}\n            <Card className=\"bg-zinc-800 border-zinc-700\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Change Password</CardTitle>\n                <CardDescription>Update your account password</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handlePasswordChange} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"current-password\" className=\"text-zinc-300\">Current Password</Label>\n                    <Input\n                      id=\"current-password\"\n                      type=\"password\"\n                      value={currentPassword}\n                      onChange={(e) => setCurrentPassword(e.target.value)}\n                      className=\"bg-zinc-700 border-zinc-600\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"new-password\" className=\"text-zinc-300\">New Password</Label>\n                    <Input\n                      id=\"new-password\"\n                      type=\"password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      className=\"bg-zinc-700 border-zinc-600\"\n                      required\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"confirm-password\" className=\"text-zinc-300\">Confirm New Password</Label>\n                    <Input\n                      id=\"confirm-password\"\n                      type=\"password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      className=\"bg-zinc-700 border-zinc-600\"\n                      required\n                    />\n                  </div>\n                  <Button \n                    type=\"submit\" \n                    disabled={isChangingPassword}\n                    className=\"w-full bg-amber-500 hover:bg-amber-600 text-black\"\n                  >\n                    {isChangingPassword ? 'Changing Password...' : 'Change Password'}\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Subscription Management */}\n          <Card className=\"bg-zinc-800 border-zinc-700 mt-6\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2 text-white\">\n                <CreditCard className=\"w-5 h-5\" />\n                <span>Subscription Management</span>\n              </CardTitle>\n              <CardDescription>Manage your AlfredFlix subscription</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-6 md:grid-cols-2\">\n                <div>\n                  <h3 className=\"font-semibold text-white mb-4\">Current Plan</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-4 bg-zinc-700 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium text-white capitalize\">\n                          {user.planType} Plan\n                        </p>\n                        <p className=\"text-sm text-zinc-400\">\n                          {user.planType === 'premium' \n                            ? '$14.99/month - 4K UHD, 4 concurrent streams' \n                            : '$9.99/month - HD quality, 2 concurrent streams'\n                          }\n                        </p>\n                      </div>\n                      <Badge variant={user.planType === 'premium' ? 'default' : 'secondary'}>\n                        Active\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div>\n                  <h3 className=\"font-semibold text-white mb-4\">Plan Options</h3>\n                  <div className=\"space-y-3\">\n                    {user.planType === 'standard' ? (\n                      <Button \n                        onClick={() => handlePlanChange('premium')}\n                        className=\"w-full bg-amber-500 hover:bg-amber-600 text-black\"\n                      >\n                        <Crown className=\"w-4 h-4 mr-2\" />\n                        Upgrade to Premium\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={() => handlePlanChange('standard')}\n                        variant=\"outline\"\n                        className=\"w-full border-zinc-600 text-zinc-300 hover:bg-zinc-700\"\n                      >\n                        Downgrade to Standard\n                      </Button>\n                    )}\n                    \n                    <Separator className=\"bg-zinc-700\" />\n                    \n                    <Button \n                      onClick={handleCancelSubscription}\n                      variant=\"destructive\"\n                      className=\"w-full\"\n                    >\n                      <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                      Cancel Subscription\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":10758},"client/src/pages/admin-coupons.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Switch } from '@/components/ui/switch';\nimport { Badge } from '@/components/ui/badge';\nimport { Plus, Edit, Trash2, Tag, Percent, DollarSign, Gift } from 'lucide-react';\nimport type { Coupon } from '@shared/schema';\n\nexport default function AdminCoupons() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingCoupon, setEditingCoupon] = useState<Coupon | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: coupons, isLoading } = useQuery({\n    queryKey: ['/api/admin/coupons'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/admin/coupons');\n      return response.json();\n    }\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (couponData: any) => {\n      const response = await apiRequest('POST', '/api/admin/coupons', couponData);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      setIsCreateModalOpen(false);\n      toast({\n        title: \"Success\",\n        description: \"Coupon created successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create coupon\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, ...data }: any) => {\n      const response = await apiRequest('PUT', `/api/admin/coupons/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      setEditingCoupon(null);\n      toast({\n        title: \"Success\",\n        description: \"Coupon updated successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update coupon\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest('DELETE', `/api/admin/coupons/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/coupons'] });\n      toast({\n        title: \"Success\",\n        description: \"Coupon deleted successfully\"\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete coupon\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const getDiscountIcon = (type: string) => {\n    switch (type) {\n      case 'percent': return <Percent className=\"w-4 h-4\" />;\n      case 'amount': return <DollarSign className=\"w-4 h-4\" />;\n      case 'free_month': return <Gift className=\"w-4 h-4\" />;\n      default: return <Tag className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getDiscountText = (coupon: Coupon) => {\n    switch (coupon.discountType) {\n      case 'percent': return `${coupon.discountValue}% off`;\n      case 'amount': return `$${coupon.discountValue} off`;\n      case 'free_month': return 'Free first month';\n      default: return coupon.discountValue;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"flex items-center justify-center py-8\">\n          <div className=\"w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full animate-spin\" />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-white\">Coupon Management</h1>\n          <p className=\"text-zinc-400\">Create and manage discount coupons</p>\n        </div>\n        \n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogTrigger asChild>\n            <Button className=\"bg-amber-500 hover:bg-amber-600 text-black\" data-testid=\"create-coupon-button\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Create Coupon\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"bg-zinc-900 border-zinc-700 max-w-md\">\n            <DialogHeader>\n              <DialogTitle className=\"text-white\">Create New Coupon</DialogTitle>\n            </DialogHeader>\n            <CouponForm \n              onSubmit={(data) => createMutation.mutate(data)}\n              isLoading={createMutation.isPending}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Coupon List */}\n      <div className=\"grid gap-4\">\n        {coupons?.length === 0 ? (\n          <Card className=\"bg-zinc-800 border-zinc-700\">\n            <CardContent className=\"p-8 text-center\">\n              <Tag className=\"w-12 h-12 text-zinc-500 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-white mb-2\">No coupons created yet</h3>\n              <p className=\"text-zinc-400 mb-4\">Create your first discount coupon to get started.</p>\n              <Button \n                onClick={() => setIsCreateModalOpen(true)}\n                className=\"bg-amber-500 hover:bg-amber-600 text-black\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Coupon\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          coupons?.map((coupon: Coupon) => (\n            <Card key={coupon.id} className=\"bg-zinc-800 border-zinc-700\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-amber-500/20 rounded-lg flex items-center justify-center\">\n                      {getDiscountIcon(coupon.discountType)}\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"font-semibold text-white\">{coupon.name}</h3>\n                        <Badge \n                          variant={coupon.isActive ? \"default\" : \"secondary\"}\n                          className={coupon.isActive ? \"bg-green-500/20 text-green-400\" : \"bg-zinc-600 text-zinc-400\"}\n                        >\n                          {coupon.isActive ? 'Active' : 'Inactive'}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-zinc-400\">Code: <span className=\"font-mono\">{coupon.code}</span></p>\n                      <p className=\"text-sm text-amber-400\">{getDiscountText(coupon)}</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"text-right text-sm text-zinc-400\">\n                      <p>Used: {coupon.currentUses || 0}{coupon.maxUses ? `/${coupon.maxUses}` : ''}</p>\n                      {coupon.expiresAt && (\n                        <p>Expires: {new Date(coupon.expiresAt).toLocaleDateString()}</p>\n                      )}\n                    </div>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => setEditingCoupon(coupon)}\n                      data-testid={`edit-coupon-${coupon.code}`}\n                    >\n                      <Edit className=\"w-4 h-4\" />\n                    </Button>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteMutation.mutate(coupon.id)}\n                      className=\"text-red-400 hover:text-red-300\"\n                      data-testid={`delete-coupon-${coupon.code}`}\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n\n      {/* Edit Modal */}\n      <Dialog open={!!editingCoupon} onOpenChange={() => setEditingCoupon(null)}>\n        <DialogContent className=\"bg-zinc-900 border-zinc-700 max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-white\">Edit Coupon</DialogTitle>\n          </DialogHeader>\n          {editingCoupon && (\n            <CouponForm \n              initialData={editingCoupon}\n              onSubmit={(data) => updateMutation.mutate({ id: editingCoupon.id, ...data })}\n              isLoading={updateMutation.isPending}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\ninterface CouponFormProps {\n  initialData?: Coupon;\n  onSubmit: (data: any) => void;\n  isLoading: boolean;\n}\n\nfunction CouponForm({ initialData, onSubmit, isLoading }: CouponFormProps) {\n  const [formData, setFormData] = useState({\n    code: initialData?.code || '',\n    name: initialData?.name || '',\n    discountType: initialData?.discountType || 'percent',\n    discountValue: initialData?.discountValue || '',\n    isActive: initialData?.isActive ?? true,\n    oneTimeUse: initialData?.oneTimeUse ?? false,\n    newAccountsOnly: initialData?.newAccountsOnly ?? false,\n    maxUses: initialData?.maxUses || '',\n    expiresAt: initialData?.expiresAt ? new Date(initialData.expiresAt).toISOString().slice(0, 16) : ''\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const submitData = {\n      ...formData,\n      expiresAt: formData.expiresAt ? new Date(formData.expiresAt).toISOString() : null,\n      maxUses: formData.maxUses ? parseInt(formData.maxUses) : null\n    };\n    \n    onSubmit(submitData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <Label htmlFor=\"code\" className=\"text-zinc-300\">Coupon Code</Label>\n        <Input\n          id=\"code\"\n          value={formData.code}\n          onChange={(e) => setFormData(prev => ({ ...prev, code: e.target.value }))}\n          placeholder=\"SAVE20\"\n          className=\"bg-zinc-800 border-zinc-600 text-white\"\n          required\n          data-testid=\"coupon-code-input\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"name\" className=\"text-zinc-300\">Display Name</Label>\n        <Input\n          id=\"name\"\n          value={formData.name}\n          onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n          placeholder=\"20% Off Discount\"\n          className=\"bg-zinc-800 border-zinc-600 text-white\"\n          required\n          data-testid=\"coupon-name-input\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"discountType\" className=\"text-zinc-300\">Discount Type</Label>\n        <Select value={formData.discountType} onValueChange={(value) => setFormData(prev => ({ ...prev, discountType: value }))}>\n          <SelectTrigger className=\"bg-zinc-800 border-zinc-600 text-white\" data-testid=\"discount-type-select\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent className=\"bg-zinc-800 border-zinc-600\">\n            <SelectItem value=\"percent\">Percentage Off</SelectItem>\n            <SelectItem value=\"amount\">Dollar Amount Off</SelectItem>\n            <SelectItem value=\"free_month\">Free First Month</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n\n      {formData.discountType !== 'free_month' && (\n        <div>\n          <Label htmlFor=\"discountValue\" className=\"text-zinc-300\">\n            Discount Value {formData.discountType === 'percent' ? '(%)' : '($)'}\n          </Label>\n          <Input\n            id=\"discountValue\"\n            type=\"number\"\n            step={formData.discountType === 'amount' ? '0.01' : '1'}\n            value={formData.discountValue}\n            onChange={(e) => setFormData(prev => ({ ...prev, discountValue: e.target.value }))}\n            placeholder={formData.discountType === 'percent' ? '20' : '5.00'}\n            className=\"bg-zinc-800 border-zinc-600 text-white\"\n            required\n            data-testid=\"discount-value-input\"\n          />\n        </div>\n      )}\n\n      <div>\n        <Label htmlFor=\"maxUses\" className=\"text-zinc-300\">Max Uses (Optional)</Label>\n        <Input\n          id=\"maxUses\"\n          type=\"number\"\n          value={formData.maxUses}\n          onChange={(e) => setFormData(prev => ({ ...prev, maxUses: e.target.value }))}\n          placeholder=\"Leave empty for unlimited\"\n          className=\"bg-zinc-800 border-zinc-600 text-white\"\n          data-testid=\"max-uses-input\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"expiresAt\" className=\"text-zinc-300\">Expiration Date (Optional)</Label>\n        <Input\n          id=\"expiresAt\"\n          type=\"datetime-local\"\n          value={formData.expiresAt}\n          onChange={(e) => setFormData(prev => ({ ...prev, expiresAt: e.target.value }))}\n          className=\"bg-zinc-800 border-zinc-600 text-white\"\n          data-testid=\"expires-at-input\"\n        />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <Label htmlFor=\"isActive\" className=\"text-zinc-300\">Active</Label>\n        <Switch\n          id=\"isActive\"\n          checked={formData.isActive}\n          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}\n          data-testid=\"is-active-switch\"\n        />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <Label htmlFor=\"oneTimeUse\" className=\"text-zinc-300\">One-time Use</Label>\n        <Switch\n          id=\"oneTimeUse\"\n          checked={formData.oneTimeUse}\n          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, oneTimeUse: checked }))}\n          data-testid=\"one-time-use-switch\"\n        />\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <Label htmlFor=\"newAccountsOnly\" className=\"text-zinc-300\">New Accounts Only</Label>\n        <Switch\n          id=\"newAccountsOnly\"\n          checked={formData.newAccountsOnly}\n          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, newAccountsOnly: checked }))}\n          data-testid=\"new-accounts-only-switch\"\n        />\n      </div>\n\n      <Button \n        type=\"submit\" \n        className=\"w-full bg-amber-500 hover:bg-amber-600 text-black\"\n        disabled={isLoading}\n        data-testid=\"submit-coupon-form\"\n      >\n        {isLoading ? (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 border-2 border-zinc-900 border-t-transparent rounded-full animate-spin\" />\n            <span>{initialData ? 'Updating...' : 'Creating...'}</span>\n          </div>\n        ) : (\n          initialData ? 'Update Coupon' : 'Create Coupon'\n        )}\n      </Button>\n    </form>\n  );\n}","size_bytes":15324},"client/src/pages/admin.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Navigation } from '@/components/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { Users, Crown, DollarSign, UserPlus, RefreshCw, Trash2, Edit3, Plus } from 'lucide-react';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface AdminUser {\n  id: string;\n  username: string;\n  email: string;\n  planType: 'standard' | 'premium';\n  monthlyPrice?: string;\n  jellyfinUserId?: string;\n  stripeCustomerId?: string;\n  stripeSubscriptionId?: string;\n  status: 'active' | 'inactive' | 'suspended';\n  isAdmin: boolean;\n  createdAt: string;\n  expiresAt?: string;\n  neverExpires?: boolean;\n}\n\ninterface JellyfinUserImport {\n  id: string;\n  name: string;\n  hasPassword: boolean;\n  lastLoginDate?: string;\n  lastActivityDate?: string;\n  isAdmin?: boolean;\n  isDisabled?: boolean;\n}\n\ninterface JellyfinLibrary {\n  id: string;\n  name: string;\n  collectionType: string;\n}\n\nexport default function AdminPanel() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUser, setSelectedUser] = useState<AdminUser | null>(null);\n  const [editingPrice, setEditingPrice] = useState<string>('');\n  const [importDialogOpen, setImportDialogOpen] = useState(false);\n  const [userDialogOpen, setUserDialogOpen] = useState(false);\n  const [bulkDays, setBulkDays] = useState('');\n  const [bulkDialogOpen, setBulkDialogOpen] = useState(false);\n  const [createUserDialogOpen, setCreateUserDialogOpen] = useState(false);\n  const [newUser, setNewUser] = useState({\n    username: '',\n    email: '',\n    password: '',\n    planType: 'standard' as 'standard' | 'premium',\n    monthlyPrice: '9.99',\n    isAdmin: false,\n  });\n  \n  // Admin verification\n  if (!user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-zinc-900\">\n        <Navigation />\n        <div className=\"container mx-auto px-4 pt-24\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-white mb-4\">Access Denied</h1>\n            <p className=\"text-zinc-400\">You don't have permission to access the admin panel.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Fetch users \n  const { data: users, isLoading } = useQuery({\n    queryKey: ['admin', 'users'],\n    queryFn: () => apiRequest('GET', '/api/admin/users').then(r => r.json()),\n    enabled: !!user?.isAdmin,\n  });\n\n  // Fetch Jellyfin users for import\n  const { data: jellyfinUsers, isLoading: jellyfinUsersLoading, error: jellyfinUsersError } = useQuery({\n    queryKey: ['admin', 'jellyfin-users'],\n    queryFn: () => apiRequest('GET', '/api/admin/jellyfin-users').then(r => r.json()),\n    enabled: importDialogOpen,\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: ({ id, updates }: { id: string; updates: Partial<AdminUser> }) =>\n      apiRequest('PATCH', `/api/admin/users/${id}`, updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      toast({ title: 'User updated successfully' });\n      setUserDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ title: 'Failed to update user', description: error.message, variant: 'destructive' });\n    }\n  });\n\n  // Import Jellyfin user mutation\n  const importUserMutation = useMutation({\n    mutationFn: (jellyfinUser: JellyfinUserImport & { planType: string }) =>\n      apiRequest('POST', '/api/admin/import-user', jellyfinUser),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      toast({ title: 'User imported successfully' });\n    },\n    onError: () => {\n      toast({ title: 'Failed to import user', variant: 'destructive' });\n    }\n  });\n\n  // Create new user mutation\n  const createUserMutation = useMutation({\n    mutationFn: (userData: typeof newUser) =>\n      apiRequest('POST', '/api/admin/create-user', userData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      toast({ title: 'User created successfully' });\n      setCreateUserDialogOpen(false);\n      setNewUser({\n        username: '',\n        email: '',\n        password: '',\n        planType: 'standard',\n        monthlyPrice: '9.99',\n        isAdmin: false,\n      });\n    },\n    onError: (error: any) => {\n      toast({ \n        title: 'Failed to create user', \n        description: error.message || 'Unknown error',\n        variant: 'destructive' \n      });\n    }\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: (userId: string) =>\n      apiRequest('DELETE', `/api/admin/users/${userId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n      toast({ title: 'User deleted successfully' });\n      setUserDialogOpen(false);\n    },\n    onError: (error: any) => {\n      toast({ title: 'Failed to delete user', description: error.message, variant: 'destructive' });\n    }\n  });\n\n  // Stats calculations\n  const totalUsers = users?.length || 0;\n  const activeUsers = users?.filter((u: AdminUser) => u.status === 'active').length || 0;\n  const premiumUsers = users?.filter((u: AdminUser) => u.planType === 'premium').length || 0;\n  \n  // Calculate revenue using actual individual pricing instead of plan defaults\n  const totalRevenue = users?.reduce((sum, user) => {\n    if (user.status === 'active') {\n      const monthlyPrice = parseFloat(user.monthlyPrice || '0');\n      return sum + monthlyPrice;\n    }\n    return sum;\n  }, 0) || 0;\n\n  const handleUserUpdate = (updates: Partial<AdminUser>) => {\n    if (!selectedUser) return;\n    updateUserMutation.mutate({ id: selectedUser.id, updates });\n  };\n\n  const handleJellyfinImport = (jellyfinUser: JellyfinUserImport, planType: string) => {\n    importUserMutation.mutate({ ...jellyfinUser, planType });\n  };\n\n  const handleCreateUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newUser.username || !newUser.email || !newUser.password) {\n      toast({\n        title: 'Validation Error',\n        description: 'Please fill in all required fields',\n        variant: 'destructive'\n      });\n      return;\n    }\n    createUserMutation.mutate(newUser);\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    if (window.confirm('Are you sure you want to delete this user? This action cannot be undone.')) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900\" data-testid=\"admin-panel\">\n      <Navigation />\n      \n      <div className=\"container mx-auto px-4 pt-24\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-white mb-2\">Admin Panel</h1>\n          <p className=\"text-zinc-400\">Manage users, billing, and system settings</p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"luxury-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-zinc-300\">Total Users</CardTitle>\n              <Users className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">{totalUsers}</div>\n              <p className=\"text-xs text-zinc-500\">+12% from last month</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"luxury-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-zinc-300\">Active Users</CardTitle>\n              <Crown className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">{activeUsers}</div>\n              <p className=\"text-xs text-zinc-500\">{premiumUsers} premium subscribers</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"luxury-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-zinc-300\">Monthly Revenue</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-white\">${totalRevenue.toFixed(2)}</div>\n              <p className=\"text-xs text-zinc-500\">Recurring revenue</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"luxury-card\">\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-zinc-300\">Actions</CardTitle>\n              <UserPlus className=\"h-4 w-4 text-amber-500\" />\n            </CardHeader>\n            <CardContent className=\"space-y-2\">\n              <Dialog open={createUserDialogOpen} onOpenChange={setCreateUserDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"w-full text-xs bg-amber-500 hover:bg-amber-600 text-black\">\n                    <Plus className=\"w-3 h-3 mr-1\" />\n                    Create New User\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md luxury-card\">\n                  <DialogHeader>\n                    <DialogTitle>Create New User</DialogTitle>\n                  </DialogHeader>\n                  <form onSubmit={handleCreateUser} className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"username\" className=\"text-zinc-300\">Username</Label>\n                      <Input\n                        id=\"username\"\n                        value={newUser.username}\n                        onChange={(e) => setNewUser({...newUser, username: e.target.value})}\n                        className=\"bg-zinc-700 border-zinc-600\"\n                        placeholder=\"Enter username\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"email\" className=\"text-zinc-300\">Email</Label>\n                      <Input\n                        id=\"email\"\n                        type=\"email\"\n                        value={newUser.email}\n                        onChange={(e) => setNewUser({...newUser, email: e.target.value})}\n                        className=\"bg-zinc-700 border-zinc-600\"\n                        placeholder=\"Enter email\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"password\" className=\"text-zinc-300\">Password</Label>\n                      <Input\n                        id=\"password\"\n                        type=\"password\"\n                        value={newUser.password}\n                        onChange={(e) => setNewUser({...newUser, password: e.target.value})}\n                        className=\"bg-zinc-700 border-zinc-600\"\n                        placeholder=\"Enter password\"\n                        required\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"plan\" className=\"text-zinc-300\">Plan Type</Label>\n                      <Select value={newUser.planType} onValueChange={(value: 'standard' | 'premium') => {\n                        const defaultPrice = value === 'premium' ? '14.99' : '9.99';\n                        setNewUser({...newUser, planType: value, monthlyPrice: defaultPrice});\n                      }}>\n                        <SelectTrigger className=\"bg-zinc-700 border-zinc-600\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"standard\">Standard (Default: $9.99/month)</SelectItem>\n                          <SelectItem value=\"premium\">Premium (Default: $14.99/month)</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"monthlyPrice\" className=\"text-zinc-300\">Monthly Price ($)</Label>\n                      <Input\n                        id=\"monthlyPrice\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        value={newUser.monthlyPrice}\n                        onChange={(e) => setNewUser({...newUser, monthlyPrice: e.target.value})}\n                        className=\"bg-zinc-700 border-zinc-600\"\n                        placeholder=\"9.99\"\n                      />\n                      <p className=\"text-xs text-zinc-500 mt-1\">Set to 0.00 for free users or custom pricing</p>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"isAdmin\"\n                        checked={newUser.isAdmin}\n                        onChange={(e) => setNewUser({...newUser, isAdmin: e.target.checked})}\n                        className=\"rounded\"\n                      />\n                      <Label htmlFor=\"isAdmin\" className=\"text-zinc-300\">Admin privileges</Label>\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        type=\"submit\" \n                        disabled={createUserMutation.isPending}\n                        className=\"flex-1 bg-amber-500 hover:bg-amber-600 text-black\"\n                      >\n                        {createUserMutation.isPending ? 'Creating...' : 'Create User'}\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\"\n                        onClick={() => setCreateUserDialogOpen(false)}\n                        className=\"border-zinc-600\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                </DialogContent>\n              </Dialog>\n              \n              <Dialog open={importDialogOpen} onOpenChange={setImportDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" variant=\"outline\" className=\"w-full text-xs border-zinc-600 mb-2\">Import Jellyfin Users</Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-4xl max-h-[80vh] overflow-y-auto luxury-card\">\n                  <DialogHeader>\n                    <DialogTitle>Import Jellyfin Users</DialogTitle>\n                    <p className=\"text-sm text-zinc-400\">Only showing users not already imported to AlfredFlix</p>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    {jellyfinUsersLoading && (\n                      <div className=\"text-center py-8\">\n                        <div className=\"animate-spin w-8 h-8 border-4 border-amber-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n                        <p className=\"text-zinc-400\">Loading Jellyfin users...</p>\n                      </div>\n                    )}\n                    {jellyfinUsersError && (\n                      <div className=\"text-center py-8 text-red-400\">\n                        <p>Failed to load Jellyfin users</p>\n                        <p className=\"text-sm text-zinc-500 mt-2\">{jellyfinUsersError.message}</p>\n                      </div>\n                    )}\n                    {!jellyfinUsersLoading && !jellyfinUsersError && jellyfinUsers?.filter((jfUser: JellyfinUserImport) => {\n                      // Filter out users that already exist in AlfredFlix\n                      const existsInAlfredFlix = users?.some((user: AdminUser) => \n                        user.username.toLowerCase() === jfUser.name.toLowerCase() ||\n                        user.jellyfinUserId === jfUser.id\n                      );\n                      return !existsInAlfredFlix;\n                    }).map((jfUser: JellyfinUserImport) => (\n                      <div key={jfUser.id} className=\"flex items-center justify-between p-4 border border-zinc-700 rounded-lg bg-zinc-800/50\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2\">\n                            <p className=\"font-medium text-white\">{jfUser.name}</p>\n                            {jfUser.isAdmin && <Badge className=\"bg-amber-500 text-xs\">JF Admin</Badge>}\n                            {jfUser.isDisabled && <Badge variant=\"destructive\" className=\"text-xs\">Disabled</Badge>}\n                          </div>\n                          <div className=\"text-sm text-zinc-400 space-y-1\">\n                            {jfUser.lastLoginDate && (\n                              <p>Last login: {new Date(jfUser.lastLoginDate).toLocaleDateString()}</p>\n                            )}\n                            {jfUser.lastActivityDate && (\n                              <p>Last activity: {new Date(jfUser.lastActivityDate).toLocaleDateString()}</p>\n                            )}\n                            {!jfUser.lastLoginDate && !jfUser.lastActivityDate && (\n                              <p>Never logged in</p>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          {!jfUser.isDisabled && (\n                            <Select onValueChange={(planType) => handleJellyfinImport(jfUser, planType)}>\n                              <SelectTrigger className=\"w-32\">\n                                <SelectValue placeholder=\"Import as...\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"standard\">Standard</SelectItem>\n                                <SelectItem value=\"premium\">Premium</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                    {!jellyfinUsersLoading && !jellyfinUsersError && jellyfinUsers?.filter((jfUser: JellyfinUserImport) => {\n                      const existsInAlfredFlix = users?.some((user: AdminUser) => \n                        user.username.toLowerCase() === jfUser.name.toLowerCase() ||\n                        user.jellyfinUserId === jfUser.id\n                      );\n                      return !existsInAlfredFlix;\n                    }).length === 0 && (\n                      <div className=\"text-center py-8 text-zinc-400\">\n                        <p>All Jellyfin users have already been imported to AlfredFlix</p>\n                      </div>\n                    )}\n                  </div>\n                </DialogContent>\n              </Dialog>\n              \n              <Dialog open={bulkDialogOpen} onOpenChange={setBulkDialogOpen}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"w-full text-xs bg-blue-600 hover:bg-blue-700 text-white\">\n                    <Plus className=\"w-3 h-3 mr-1\" />\n                    Bulk Add Days\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md luxury-card\">\n                  <DialogHeader>\n                    <DialogTitle>Bulk Extend Expiration</DialogTitle>\n                  </DialogHeader>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"bulkDays\">Days to Add to All Active Users</Label>\n                      <Input\n                        id=\"bulkDays\"\n                        type=\"number\"\n                        placeholder=\"30\"\n                        value={bulkDays}\n                        onChange={(e) => setBulkDays(e.target.value)}\n                      />\n                    </div>\n                    <Button \n                      onClick={async () => {\n                        try {\n                          const response = await apiRequest('POST', '/api/admin/bulk-extend-expiration', { days: parseInt(bulkDays) });\n                          const result = await response.json();\n                          toast({ title: 'Success', description: result.message });\n                          queryClient.invalidateQueries({ queryKey: ['admin', 'users'] });\n                          setBulkDialogOpen(false);\n                          setBulkDays('');\n                        } catch (error: any) {\n                          toast({ title: 'Error', description: 'Failed to extend expiration dates', variant: 'destructive' });\n                        }\n                      }}\n                      className=\"w-full\"\n                      disabled={!bulkDays || parseInt(bulkDays) <= 0}\n                    >\n                      Add Days to All Users\n                    </Button>\n                  </div>\n                </DialogContent>\n              </Dialog>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Users Table */}\n        <Card className=\"luxury-card\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">User Management</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead className=\"text-zinc-300\">Username</TableHead>\n                  <TableHead className=\"text-zinc-300\">Email</TableHead>\n                  <TableHead className=\"text-zinc-300\">Plan</TableHead>\n                  <TableHead className=\"text-zinc-300\">Price/Month</TableHead>\n                  <TableHead className=\"text-zinc-300\">Status</TableHead>\n                  <TableHead className=\"text-zinc-300\">Admin</TableHead>\n                  <TableHead className=\"text-zinc-300\">Expires</TableHead>\n                  <TableHead className=\"text-zinc-300\">Actions</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {users?.map((u: AdminUser) => (\n                  <TableRow key={u.id}>\n                    <TableCell className=\"text-white font-medium\">{u.username}</TableCell>\n                    <TableCell className=\"text-zinc-300\">{u.email}</TableCell>\n                    <TableCell>\n                      <Badge variant={u.planType === 'premium' ? 'default' : 'secondary'}>\n                        {u.planType}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-zinc-300\">\n                      ${u.monthlyPrice || '9.99'}\n                    </TableCell>\n                    <TableCell>\n                      <Badge \n                        variant={u.status === 'active' ? 'default' : u.status === 'suspended' ? 'destructive' : 'secondary'}\n                      >\n                        {u.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      {u.isAdmin ? <Badge className=\"bg-amber-500\">Admin</Badge> : '-'}\n                    </TableCell>\n                    <TableCell className=\"text-zinc-300\">\n                      {u.neverExpires ? (\n                        <Badge variant=\"secondary\">Never</Badge>\n                      ) : u.expiresAt ? (\n                        new Date(u.expiresAt).toLocaleDateString()\n                      ) : (\n                        <span className=\"text-zinc-500\">Not set</span>\n                      )}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Dialog open={userDialogOpen && selectedUser?.id === u.id} onOpenChange={(open) => {\n                          setUserDialogOpen(open);\n                          if (open) setSelectedUser(u);\n                        }}>\n                          <DialogTrigger asChild>\n                            <Button variant=\"outline\" size=\"sm\">\n                              <Edit3 className=\"w-3 h-3 mr-1\" />\n                              Edit\n                            </Button>\n                          </DialogTrigger>\n                        <DialogContent className=\"sm:max-w-md luxury-card\">\n                          <DialogHeader>\n                            <DialogTitle>Edit User: {selectedUser?.username}</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"planType\">Plan Type</Label>\n                              <Select \n                                value={selectedUser?.planType} \n                                onValueChange={(value) => handleUserUpdate({ planType: value as 'standard' | 'premium' })}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"standard\">Standard</SelectItem>\n                                  <SelectItem value=\"premium\">Premium</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"monthlyPrice\">Monthly Price ($)</Label>\n                              <Input\n                                id=\"monthlyPrice\"\n                                type=\"number\"\n                                step=\"0.01\"\n                                value={editingPrice || selectedUser?.monthlyPrice || '9.99'}\n                                onChange={(e) => setEditingPrice(e.target.value)}\n                                onBlur={(e) => {\n                                  handleUserUpdate({ monthlyPrice: e.target.value });\n                                  setEditingPrice('');\n                                }}\n                                onFocus={(e) => setEditingPrice(e.target.value)}\n                                onKeyDown={(e) => {\n                                  if (e.key === 'Enter') {\n                                    handleUserUpdate({ monthlyPrice: e.currentTarget.value });\n                                    setEditingPrice('');\n                                    e.currentTarget.blur();\n                                  }\n                                }}\n                                className=\"bg-zinc-700 border-zinc-600\"\n                                placeholder=\"9.99\"\n                              />\n                              <p className=\"text-xs text-zinc-500 mt-1\">Set to 0.00 for free users or enter custom pricing</p>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"status\">Status</Label>\n                              <Select \n                                value={selectedUser?.status} \n                                onValueChange={(value) => handleUserUpdate({ status: value as 'active' | 'inactive' | 'suspended' })}\n                              >\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"active\">Active</SelectItem>\n                                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                                  <SelectItem value=\"suspended\">Suspended</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <input\n                                type=\"checkbox\"\n                                id=\"isAdmin\"\n                                checked={selectedUser?.isAdmin}\n                                onChange={(e) => handleUserUpdate({ isAdmin: e.target.checked })}\n                                className=\"w-4 h-4\"\n                              />\n                              <Label htmlFor=\"isAdmin\">Admin Access</Label>\n                            </div>\n                            <div>\n                              <Label htmlFor=\"expiresAt\">Expiration Date</Label>\n                              <Input\n                                id=\"expiresAt\"\n                                type=\"date\"\n                                value={selectedUser?.expiresAt ? new Date(selectedUser.expiresAt).toISOString().split('T')[0] : ''}\n                                onChange={(e) => {\n                                  if (e.target.value) {\n                                    const expirationDate = new Date(e.target.value + 'T23:59:59');\n                                    handleUserUpdate({ expiresAt: expirationDate.toISOString() });\n                                  }\n                                }}\n                                className=\"bg-zinc-700 border-zinc-600\"\n                              />\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <input\n                                type=\"checkbox\"\n                                id=\"neverExpires\"\n                                checked={selectedUser?.neverExpires}\n                                onChange={(e) => handleUserUpdate({ neverExpires: e.target.checked })}\n                                className=\"w-4 h-4\"\n                              />\n                              <Label htmlFor=\"neverExpires\">Never Expires</Label>\n                            </div>\n                          </div>\n                        </DialogContent>\n                        </Dialog>\n                        {user?.id !== u.id && ( // Don't allow deleting yourself\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            onClick={() => handleDeleteUser(u.id)}\n                          >\n                            <Trash2 className=\"w-3 h-3 mr-1\" />\n                            Delete\n                          </Button>\n                        )}\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":31522},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Navigation } from '@/components/navigation';\nimport { MediaCard } from '@/components/media-card';\nimport { MediaDetailModal } from '@/components/media-detail-modal';\nimport { VideoPlayer } from '@/components/video-player';\nimport { Button } from '@/components/ui/button';\nimport { Play, Info, Clock, Film, Tv } from 'lucide-react';\nimport { useContinueWatching, useNextUp, useLatestItems, useJellyfinLibraries } from '@/hooks/use-jellyfin';\nimport { useAuth } from '@/hooks/use-auth';\nimport { type JellyfinItem } from '@/lib/jellyfin-api';\nimport { jellyfinApi } from '@/lib/jellyfin-api';\n\nexport default function Dashboard() {\n  const { user } = useAuth();\n  const [selectedItem, setSelectedItem] = useState<JellyfinItem | null>(null);\n  const [showMediaDetail, setShowMediaDetail] = useState(false);\n  const [showPlayer, setShowPlayer] = useState(false);\n  const [playerQuality, setPlayerQuality] = useState<'auto' | '1080p' | '4k'>('auto');\n\n  const [currentHeroIndex, setCurrentHeroIndex] = useState(0);\n  \n  const { data: continueWatching } = useContinueWatching();\n  const { data: nextUp } = useNextUp();\n  const { data: libraries } = useJellyfinLibraries();\n  const { data: latestMovies } = useLatestItems(libraries?.find(lib => lib.Name.toLowerCase().includes('movie'))?.Id);\n  const { data: latestShows } = useLatestItems(libraries?.find(lib => lib.Name.toLowerCase().includes('show'))?.Id);\n\n  // Use latest movies for rotating hero banner (take first 15)\n  const heroMovies = latestMovies?.slice(0, 15) || [];\n  const currentHeroMovie = heroMovies[currentHeroIndex];\n\n  // Auto-rotate hero every 5 seconds\n  useEffect(() => {\n    if (heroMovies.length > 1) {\n      const interval = setInterval(() => {\n        setCurrentHeroIndex((prev) => (prev + 1) % heroMovies.length);\n      }, 5000);\n      \n      return () => clearInterval(interval);\n    }\n  }, [heroMovies.length]);\n\n  // Get hero backdrop URL\n  const getHeroBackdropUrl = (item: JellyfinItem) => {\n    if (item.BackdropImageTags?.[0]) {\n      return jellyfinApi.getImageUrl(item.Id, 'Backdrop', item.BackdropImageTags[0]);\n    } else if (item.ImageTags?.Primary) {\n      return jellyfinApi.getImageUrl(item.Id, 'Primary', item.ImageTags.Primary);\n    }\n    return \"https://images.unsplash.com/photo-1536440136628-849c177e76a1?ixlib=rb-4.0.3&auto=format&fit=crop&w=2725&q=80\";\n  };\n\n  const handleMediaClick = (item: JellyfinItem) => {\n    setSelectedItem(item);\n    setShowMediaDetail(true);\n  };\n\n  const handlePlay = (item: JellyfinItem, quality: 'auto' | '1080p' | '4k' = 'auto') => {\n    setSelectedItem(item);\n    setPlayerQuality(quality);\n    setShowPlayer(true);\n  };\n\n  const handlePlayFromModal = (quality: 'auto' | '1080p' | '4k') => {\n    setPlayerQuality(quality);\n    setShowPlayer(true);\n  };\n\n  // Show login prompt if not authenticated\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-zinc-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl lg:text-6xl font-bold text-white mb-4\">AlfredFlix</h1>\n          <p className=\"text-xl text-zinc-300 mb-8\">Please log in to access your premium content</p>\n          <a \n            href=\"/login\" \n            className=\"bg-amber-500 text-zinc-900 px-6 py-3 rounded-lg font-semibold hover:bg-amber-400 transition-colors\"\n          >\n            Sign In\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900\" data-testid=\"dashboard-page\">\n      <Navigation />\n\n      {/* Hero Banner - Rotating Latest Movies */}\n      <section className=\"relative h-screen overflow-hidden pt-16\">\n        {currentHeroMovie ? (\n          <>\n            <img \n              src={getHeroBackdropUrl(currentHeroMovie)}\n              alt={currentHeroMovie.Name} \n              className=\"w-full h-full object-cover transition-opacity duration-1000\"\n              key={currentHeroIndex} // Force re-render for transition\n            />\n            <div className=\"absolute inset-0 bg-gradient-to-r from-zinc-900 via-zinc-900/60 to-transparent\" />\n            \n            <div className=\"absolute bottom-0 left-0 p-4 sm:p-8 lg:p-16 max-w-2xl\">\n              <h1 className=\"font-serif text-2xl sm:text-4xl lg:text-6xl font-bold mb-2 sm:mb-4 text-white\" data-testid=\"featured-title\">\n                {currentHeroMovie.Name}\n              </h1>\n              <p className=\"text-sm sm:text-lg lg:text-xl text-zinc-300 mb-4 sm:mb-6 leading-relaxed line-clamp-3\" data-testid=\"featured-description\">\n                {currentHeroMovie.Overview || \"Experience premium entertainment with AlfredFlix's curated movie collection.\"}\n              </p>\n              <div className=\"flex items-center space-x-2 sm:space-x-4 mb-4 sm:mb-6 text-xs sm:text-sm\">\n                <span className=\"alfredflix-gradient text-zinc-900 px-2 py-1 rounded font-medium\">\n                  {user?.planType === 'premium' ? '4K UHD' : 'HD'}\n                </span>\n                {currentHeroMovie.ProductionYear && (\n                  <span className=\"text-zinc-300\">{currentHeroMovie.ProductionYear}</span>\n                )}\n                {currentHeroMovie.OfficialRating && (\n                  <span className=\"text-zinc-300\">{currentHeroMovie.OfficialRating}</span>\n                )}\n              </div>\n              <div className=\"flex items-center space-x-2 sm:space-x-4\">\n                <Button \n                  className=\"bg-white text-zinc-900 font-semibold hover:bg-gray-200 text-sm sm:text-base px-3 sm:px-6\"\n                  data-testid=\"featured-play\"\n                  onClick={() => handlePlay(currentHeroMovie)}\n                >\n                  <Play className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n                  Play\n                </Button>\n                <Button \n                  variant=\"outline\"\n                  className=\"border-zinc-600 text-white hover:bg-zinc-800 text-sm sm:text-base px-3 sm:px-6\"\n                  data-testid=\"featured-info\"\n                  onClick={() => handleMediaClick(currentHeroMovie)}\n                >\n                  <Info className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n                  More Info\n                </Button>\n              </div>\n              \n              {/* Hero rotation indicator */}\n              <div className=\"flex items-center space-x-1 mt-4\">\n                {heroMovies.map((_, index) => (\n                  <div \n                    key={index}\n                    className={`h-1 rounded-full transition-all duration-300 ${\n                      index === currentHeroIndex ? 'w-6 bg-amber-500' : 'w-2 bg-zinc-600'\n                    }`}\n                  />\n                ))}\n              </div>\n            </div>\n          </>\n        ) : (\n          // Fallback when no movies available\n          <div className=\"w-full h-full bg-gradient-to-r from-zinc-900 to-zinc-800 flex items-center justify-center\">\n            <div className=\"text-center\">\n              <h1 className=\"text-4xl lg:text-6xl font-bold text-white mb-4\">AlfredFlix</h1>\n              <p className=\"text-xl text-zinc-300\">Loading your premium content...</p>\n            </div>\n          </div>\n        )}\n      </section>\n\n      {/* Content Sections */}\n      <div className=\"bg-zinc-900 pb-20\">\n        {/* Continue Watching */}\n        {continueWatching && continueWatching.length > 0 && (\n          <section className=\"px-4 lg:px-16 -mt-32 relative z-10\" data-testid=\"continue-watching-section\">\n            <h2 className=\"text-xl sm:text-2xl font-semibold mb-4 sm:mb-6 flex items-center text-white\">\n              <Clock className=\"text-amber-500 w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3\" />\n              Continue Watching\n            </h2>\n            <div className=\"flex space-x-3 sm:space-x-4 overflow-x-auto pb-4 scrollbar-hide\">\n              {continueWatching.map((item) => (\n                <MediaCard\n                  key={item.Id}\n                  item={item}\n                  size=\"large\"\n                  showProgress={true}\n                  progressPercent={65} // Would be calculated from actual progress\n                  timeRemaining=\"23 minutes left\"\n                  onClick={() => handlePlay(item)}\n                />\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Next Up */}\n        {nextUp && nextUp.length > 0 && (\n          <section className=\"px-4 lg:px-16 mt-8 sm:mt-12\" data-testid=\"next-up-section\">\n            <h2 className=\"text-xl sm:text-2xl font-semibold mb-4 sm:mb-6 flex items-center text-white\">\n              <Clock className=\"text-amber-500 w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3\" />\n              Next Up\n            </h2>\n            <div className=\"flex space-x-3 sm:space-x-4 overflow-x-auto pb-4 scrollbar-hide\">\n              {nextUp.map((item) => (\n                <MediaCard\n                  key={item.Id}\n                  item={item}\n                  size=\"medium\"\n                  onClick={() => handleMediaClick(item)}\n                />\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Latest Movies */}\n        {latestMovies && latestMovies.length > 0 && (\n          <section className=\"px-4 lg:px-16 mt-8 sm:mt-12\" data-testid=\"latest-movies-section\">\n            <h2 className=\"text-xl sm:text-2xl font-semibold mb-4 sm:mb-6 flex items-center text-white\">\n              <Film className=\"text-amber-500 w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3\" />\n              Latest Movies\n            </h2>\n            <div className=\"flex space-x-3 sm:space-x-4 overflow-x-auto pb-4 scrollbar-hide\">\n              {latestMovies.map((item) => (\n                <MediaCard\n                  key={item.Id}\n                  item={item}\n                  size=\"small\"\n                  onClick={() => handleMediaClick(item)}\n                />\n              ))}\n            </div>\n          </section>\n        )}\n\n        {/* Latest TV Shows */}\n        {latestShows && latestShows.length > 0 && (\n          <section className=\"px-4 lg:px-16 mt-8 sm:mt-12\" data-testid=\"latest-shows-section\">\n            <h2 className=\"text-xl sm:text-2xl font-semibold mb-4 sm:mb-6 flex items-center text-white\">\n              <Tv className=\"text-amber-500 w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3\" />\n              Popular TV Shows\n            </h2>\n            <div className=\"flex space-x-3 sm:space-x-4 overflow-x-auto pb-4 scrollbar-hide\">\n              {latestShows.map((item) => (\n                <MediaCard\n                  key={item.Id}\n                  item={item}\n                  size=\"small\"\n                  onClick={() => handleMediaClick(item)}\n                />\n              ))}\n            </div>\n          </section>\n        )}\n      </div>\n\n      {/* Media Detail Modal */}\n      <MediaDetailModal\n        item={selectedItem}\n        open={showMediaDetail}\n        onOpenChange={setShowMediaDetail}\n        onPlay={handlePlayFromModal}\n      />\n\n      {/* Video Player */}\n      <VideoPlayer\n        item={selectedItem}\n        open={showPlayer}\n        onClose={() => setShowPlayer(false)}\n        quality={playerQuality}\n      />\n    </div>\n  );\n}\n","size_bytes":11215},"client/src/pages/home.tsx":{"content":"import { useState } from 'react';\nimport { Navigation } from '@/components/navigation';\nimport { HeroSection } from '@/components/hero-section';\nimport { PricingSection } from '@/components/pricing-section';\nimport { ContactSection } from '@/components/contact-section';\nimport { AuthModal } from '@/components/auth-modal';\nimport { FeaturesSection } from '@/components/features-section';\nimport { FAQSection } from '@/components/faq-section';\n\nexport default function Home() {\n  const [showAuthModal, setShowAuthModal] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900\" data-testid=\"home-page\">\n      <Navigation onAuthModal={() => setShowAuthModal(true)} />\n      \n      <HeroSection onGetStarted={() => setShowAuthModal(true)} />\n      \n      {/* About Section */}\n      <section className=\"py-20 bg-zinc-800/50\" id=\"about\">\n        <div className=\"container mx-auto px-4 lg:px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"font-serif text-3xl md:text-5xl font-semibold mb-8\" data-testid=\"about-title\">\n              Your Personal{' '}\n              <span className=\"alfredflix-text-gradient\">\n                Cinematic Concierge\n              </span>\n            </h2>\n            <p className=\"text-lg md:text-xl text-zinc-400 leading-relaxed\" data-testid=\"about-description\">\n              At AlfredFLIX, we believe your entertainment experience should be as refined as your tastes. \n              Say goodbye to endless scrolling and disruptive advertisements. We are your dedicated cinematic concierge, \n              presenting a meticulously handpicked library of films and shows, ensuring every selection feels like \n              a bespoke recommendation crafted just for you.\n            </p>\n            <p className=\"text-lg md:text-xl text-zinc-400 leading-relaxed mt-6\">\n              Experience the convenience of content you truly desire, always delivered without upcharges or hidden fees. \n              We are at your service, always.\n            </p>\n          </div>\n        </div>\n      </section>\n\n      <FeaturesSection />\n      <PricingSection />\n      <FAQSection />\n      <ContactSection />\n\n      {/* Footer */}\n      <footer className=\"bg-zinc-900 border-t border-zinc-800/50 py-12\">\n        <div className=\"container mx-auto px-4 lg:px-6\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n            <div className=\"md:col-span-2\">\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-10 h-10 rounded-lg alfredflix-gradient flex items-center justify-center\">\n                  <span className=\"text-zinc-900 font-bold text-lg\">A</span>\n                </div>\n                <span className=\"font-serif text-xl font-semibold alfredflix-text-gradient\">\n                  AlfredFlix\n                </span>\n              </div>\n              <p className=\"text-zinc-400 mb-4 leading-relaxed\">\n                Your curated cinematic sanctuary. Experience entertainment as it was always intended – \n                without interruptions, at your service.\n              </p>\n              <p className=\"text-zinc-500 text-sm\">\n                &copy; 2025 AlfredFlix. All rights reserved.\n              </p>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-white mb-4\">Platform</h4>\n              <ul className=\"space-y-2 text-zinc-400\">\n                <li><a href=\"#about\" className=\"hover:text-amber-500 transition-colors\">About</a></li>\n                <li><a href=\"#features\" className=\"hover:text-amber-500 transition-colors\">Features</a></li>\n                <li><a href=\"#pricing\" className=\"hover:text-amber-500 transition-colors\">Pricing</a></li>\n                <li><a href=\"#faq\" className=\"hover:text-amber-500 transition-colors\">FAQ</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h4 className=\"font-semibold text-white mb-4\">Support</h4>\n              <ul className=\"space-y-2 text-zinc-400\">\n                <li><a href=\"#contact\" className=\"hover:text-amber-500 transition-colors\">Contact</a></li>\n                <li><a href=\"/login\" className=\"hover:text-amber-500 transition-colors\">Sign In</a></li>\n                <li><span className=\"text-zinc-500\">Help Center</span></li>\n                <li><span className=\"text-zinc-500\">Status</span></li>\n              </ul>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-zinc-800 pt-8 text-center\">\n            <p className=\"text-zinc-500 text-sm\">\n              Powered by premium streaming technology. Built for discerning viewers.\n            </p>\n          </div>\n        </div>\n      </footer>\n\n      <AuthModal \n        open={showAuthModal} \n        onOpenChange={setShowAuthModal} \n      />\n    </div>\n  );\n}\n","size_bytes":4870},"client/src/pages/login.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { Navigation } from '@/components/navigation';\nimport { AuthModal } from '@/components/auth-modal';\nimport { useAuth } from '@/hooks/use-auth';\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [showModal, setShowModal] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      setLocation('/dashboard');\n    }\n  }, [user, setLocation]);\n\n  const handleModalClose = (open: boolean) => {\n    setShowModal(open);\n    if (!open) {\n      setLocation('/');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900\" data-testid=\"login-page\">\n      <Navigation />\n      <AuthModal \n        open={showModal} \n        onOpenChange={handleModalClose}\n      />\n    </div>\n  );\n}\n","size_bytes":836},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/payment-success.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Check, Crown, Loader2 } from 'lucide-react';\n\nexport default function PaymentSuccess() {\n  const [, setLocation] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const processPaymentSuccess = async () => {\n      try {\n        // Get payment intent from URL\n        const urlParams = new URLSearchParams(window.location.search);\n        const paymentIntentId = urlParams.get('payment_intent');\n        const paymentIntentClientSecret = urlParams.get('payment_intent_client_secret');\n        \n        if (!paymentIntentId) {\n          throw new Error('Payment information not found');\n        }\n\n        // Get pending signup data\n        const pendingSignupData = sessionStorage.getItem('pendingSignup');\n        if (!pendingSignupData) {\n          throw new Error('Signup information not found');\n        }\n\n        const signupData = JSON.parse(pendingSignupData);\n        \n        // Create user account now that payment succeeded\n        const response = await apiRequest('POST', '/api/complete-signup', {\n          ...signupData,\n          paymentIntentId,\n          paymentIntentClientSecret\n        });\n\n        const result = await response.json();\n        \n        if (result.success) {\n          // Clear pending signup data\n          sessionStorage.removeItem('pendingSignup');\n          \n          toast({\n            title: \"Welcome to AlfredFlix!\",\n            description: \"Your account has been created and your subscription is active.\",\n          });\n          \n          // Redirect to dashboard after a brief delay\n          setTimeout(() => {\n            setLocation('/dashboard');\n          }, 2000);\n        } else {\n          throw new Error(result.message || 'Account creation failed');\n        }\n      } catch (error: any) {\n        console.error('Payment success processing error:', error);\n        setError(error.message);\n        \n        toast({\n          title: \"Account Setup Error\",\n          description: \"Payment succeeded but account creation failed. Please contact support.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsProcessing(false);\n      }\n    };\n\n    processPaymentSuccess();\n  }, [setLocation, toast]);\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-zinc-900 flex items-center justify-center py-12 px-4\">\n        <Card className=\"max-w-md w-full bg-zinc-800 border-red-500/20\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <span className=\"text-red-500 text-2xl\">✗</span>\n            </div>\n            <h1 className=\"text-2xl font-bold text-white mb-4\">Setup Error</h1>\n            <p className=\"text-zinc-400 mb-6\">{error}</p>\n            <p className=\"text-sm text-zinc-500\">\n              Your payment was successful. Please contact support for assistance.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900 flex items-center justify-center py-12 px-4\">\n      <Card className=\"max-w-md w-full bg-zinc-800 border-green-500/20\">\n        <CardContent className=\"p-8 text-center\">\n          {isProcessing ? (\n            <>\n              <div className=\"w-16 h-16 bg-amber-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Loader2 className=\"w-8 h-8 text-amber-500 animate-spin\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-white mb-4\">Setting Up Your Account</h1>\n              <p className=\"text-zinc-400 mb-6\">\n                Payment successful! We're creating your account and setting up your subscription...\n              </p>\n            </>\n          ) : (\n            <>\n              <div className=\"w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Check className=\"w-8 h-8 text-green-500\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-white mb-4\">Welcome to AlfredFlix!</h1>\n              <p className=\"text-zinc-400 mb-6\">\n                Your account has been created and your subscription is now active. \n                Redirecting you to your dashboard...\n              </p>\n              <div className=\"flex items-center justify-center space-x-2\">\n                <Crown className=\"w-5 h-5 text-amber-500\" />\n                <span className=\"text-amber-500 font-semibold\">Premium Access Activated</span>\n              </div>\n            </>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4986},"client/src/pages/player.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { VideoPlayer } from '@/components/video-player';\nimport { useJellyfinItem } from '@/hooks/use-jellyfin';\nimport { useAuth } from '@/hooks/use-auth';\n\ninterface PlayerPageProps {\n  params?: {\n    itemId?: string;\n    quality?: 'auto' | '1080p' | '4k';\n  };\n}\n\nexport default function PlayerPage({ params }: PlayerPageProps) {\n  const [, setLocation] = useLocation();\n  const { user } = useAuth();\n  const [playerOpen, setPlayerOpen] = useState(true);\n  \n  const itemId = params?.itemId || '';\n  const quality = params?.quality || 'auto';\n  \n  const { data: item } = useJellyfinItem(itemId);\n\n  useEffect(() => {\n    if (!user) {\n      setLocation('/');\n      return;\n    }\n  }, [user, setLocation]);\n\n  const handleClose = () => {\n    setPlayerOpen(false);\n    setLocation('/dashboard');\n  };\n\n  if (!user || !item) {\n    return null;\n  }\n\n  return (\n    <VideoPlayer\n      item={item}\n      open={playerOpen}\n      onClose={handleClose}\n      quality={quality}\n    />\n  );\n}\n","size_bytes":1066},"client/src/pages/search.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Search as SearchIcon, Server, PlusCircle } from 'lucide-react';\nimport { Navigation } from '@/components/navigation';\nimport { MediaCard } from '@/components/media-card';\nimport { MediaDetailModal } from '@/components/media-detail-modal';\nimport { VideoPlayer } from '@/components/video-player';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { useJellyfinSearch } from '@/hooks/use-jellyfin';\nimport { tmdbApi, type TMDBSearchResult } from '@/lib/tmdb-api';\nimport { type JellyfinItem } from '@/lib/jellyfin-api';\nimport { useToast } from '@/hooks/use-toast';\n\nexport default function SearchPage() {\n  const [query, setQuery] = useState('');\n  const [tmdbResults, setTmdbResults] = useState<TMDBSearchResult[]>([]);\n  const [selectedItem, setSelectedItem] = useState<JellyfinItem | null>(null);\n  const [showMediaDetail, setShowMediaDetail] = useState(false);\n  const [showPlayer, setShowPlayer] = useState(false);\n  const [playerQuality, setPlayerQuality] = useState<'auto' | '1080p' | '4k'>('auto');\n\n  const { data: jellyfinResults = [], isLoading: isJellyfinLoading } = useJellyfinSearch(query);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const searchTMDB = async () => {\n      if (query.length > 2) {\n        try {\n          const results = await tmdbApi.searchMulti(query);\n          setTmdbResults(results);\n        } catch (error) {\n          console.error('TMDB search failed:', error);\n          setTmdbResults([]);\n        }\n      } else {\n        setTmdbResults([]);\n      }\n    };\n\n    const timer = setTimeout(searchTMDB, 300);\n    return () => clearTimeout(timer);\n  }, [query]);\n\n  const handleMediaClick = (item: JellyfinItem) => {\n    setSelectedItem(item);\n    setShowMediaDetail(true);\n  };\n\n  const handlePlay = (item: JellyfinItem, quality: 'auto' | '1080p' | '4k' = 'auto') => {\n    setSelectedItem(item);\n    setPlayerQuality(quality);\n    setShowPlayer(true);\n  };\n\n  const handlePlayFromModal = (quality: 'auto' | '1080p' | '4k') => {\n    setPlayerQuality(quality);\n    setShowPlayer(true);\n  };\n\n  const handleRequestContent = async (tmdbItem: TMDBSearchResult) => {\n    // In a real implementation, this would integrate with Jellyseerr\n    toast({\n      title: \"Content Requested\",\n      description: `Request sent for \"${('title' in tmdbItem) ? tmdbItem.title : tmdbItem.name}\". Our team will add it to the library soon!`,\n    });\n  };\n\n  const renderTMDBCard = (item: TMDBSearchResult) => {\n    const title = 'title' in item ? item.title : item.name;\n    const year = 'release_date' in item \n      ? new Date(item.release_date).getFullYear() \n      : 'first_air_date' in item \n        ? new Date(item.first_air_date).getFullYear() \n        : null;\n    const posterUrl = tmdbApi.getPosterUrl(item.poster_path, 'w300');\n\n    return (\n      <Card \n        key={item.id}\n        className=\"w-48 h-80 cursor-pointer group bg-zinc-900 border-zinc-800 overflow-hidden\"\n        onClick={() => handleRequestContent(item)}\n        data-testid={`tmdb-card-${item.id}`}\n      >\n        <div className=\"relative h-64\">\n          <img \n            src={posterUrl || '/api/placeholder/300/450'}\n            alt={title}\n            className=\"w-full h-full object-cover opacity-75 group-hover:opacity-100 transition-opacity\"\n            onError={(e) => {\n              e.currentTarget.src = '/api/placeholder/300/450';\n            }}\n          />\n          <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/60 transition-colors flex items-center justify-center\">\n            <div className=\"text-center\">\n              <PlusCircle className=\"w-8 h-8 text-amber-500 mx-auto mb-2\" />\n              <span className=\"text-white font-medium\">Request</span>\n            </div>\n          </div>\n        </div>\n        <CardContent className=\"p-3\">\n          <h3 className=\"font-semibold text-sm text-zinc-300 truncate mb-1\">\n            {title}\n          </h3>\n          {year && (\n            <p className=\"text-xs text-zinc-500\">{year}</p>\n          )}\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const hasResults = jellyfinResults.length > 0 || tmdbResults.length > 0;\n  const showEmptyState = query.length === 0;\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900 pt-16\" data-testid=\"search-page\">\n      <Navigation />\n\n      <div className=\"container mx-auto px-4 lg:px-6 py-8\">\n        {/* Search Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"font-serif text-3xl font-semibold mb-4 text-white\" data-testid=\"search-title\">\n            Search\n          </h1>\n          <div className=\"relative max-w-2xl\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search movies, shows, actors...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              className=\"w-full px-6 py-4 bg-zinc-800/50 border-zinc-700/50 text-lg focus:ring-amber-500/50\"\n              data-testid=\"search-input\"\n            />\n            <SearchIcon className=\"absolute right-6 top-1/2 transform -translate-y-1/2 text-zinc-400 w-5 h-5\" />\n          </div>\n        </div>\n\n        {showEmptyState && (\n          <div className=\"text-center py-20\" data-testid=\"search-empty\">\n            <SearchIcon className=\"w-16 h-16 text-zinc-700 mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2 text-white\">Discover Your Next Obsession</h3>\n            <p className=\"text-zinc-400\">Search for movies, shows, and more from our curated library</p>\n          </div>\n        )}\n\n        {query.length > 0 && (\n          <div className=\"space-y-12\">\n            {/* Available on Server */}\n            {jellyfinResults.length > 0 && (\n              <section data-testid=\"jellyfin-results\">\n                <h2 className=\"text-2xl font-semibold mb-6 flex items-center text-white\">\n                  <Server className=\"text-amber-500 w-6 h-6 mr-3\" />\n                  Available Now\n                </h2>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {jellyfinResults.map((item) => (\n                    <MediaCard\n                      key={item.Id}\n                      item={item}\n                      size=\"small\"\n                      onClick={() => handleMediaClick(item)}\n                    />\n                  ))}\n                </div>\n              </section>\n            )}\n\n            {/* Request from TMDB */}\n            {tmdbResults.length > 0 && (\n              <section data-testid=\"tmdb-results\">\n                <h2 className=\"text-2xl font-semibold mb-6 flex items-center text-white\">\n                  <PlusCircle className=\"text-amber-500 w-6 h-6 mr-3\" />\n                  Request to Add\n                </h2>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\n                  {tmdbResults.map(renderTMDBCard)}\n                </div>\n              </section>\n            )}\n\n            {/* No Results */}\n            {query.length > 2 && !hasResults && !isJellyfinLoading && (\n              <div className=\"text-center py-12\" data-testid=\"no-results\">\n                <SearchIcon className=\"w-12 h-12 text-zinc-600 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2 text-white\">No results found</h3>\n                <p className=\"text-zinc-400\">Try searching with different keywords</p>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {/* Media Detail Modal */}\n      <MediaDetailModal\n        item={selectedItem}\n        open={showMediaDetail}\n        onOpenChange={setShowMediaDetail}\n        onPlay={handlePlayFromModal}\n      />\n\n      {/* Video Player */}\n      <VideoPlayer\n        item={selectedItem}\n        open={showPlayer}\n        onClose={() => setShowPlayer(false)}\n        quality={playerQuality}\n      />\n    </div>\n  );\n}\n","size_bytes":8053},"client/src/pages/subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Check, Crown, Monitor, Zap, Shield } from 'lucide-react';\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscribeForm = ({ plan }: { plan: 'standard' | 'premium' }) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isLoading, setIsLoading] = useState(false);\n  const [discountedPrice, setDiscountedPrice] = useState<string | null>(null);\n  \n  // Check URL params for discounts\n  const urlParams = new URLSearchParams(window.location.search);\n  const couponParam = urlParams.get('coupon');\n  const referralParam = urlParams.get('referral');\n\n  // Calculate display price based on discounts\n  useEffect(() => {\n    if (referralParam === 'true') {\n      setDiscountedPrice('$1.00');\n    } else if (couponParam === 'demo1') {\n      const basePrice = plan === 'premium' ? 14.99 : 9.99;\n      const discounted = (basePrice * 0.9).toFixed(2); // 10% off\n      setDiscountedPrice(`$${discounted}`);\n    }\n  }, [plan, couponParam, referralParam]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/payment-success`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Welcome to AlfredFlix!\",\n        description: \"Your subscription is now active. Enjoy premium streaming.\",\n      });\n      setLocation('/dashboard');\n    }\n    \n    setIsLoading(false);\n  };\n\n  const planDetails = {\n    standard: {\n      name: 'Standard',\n      price: '$9.99',\n      features: ['1080p HD Streaming', '2 Simultaneous Streams', 'Offline Downloads', 'Ad-Free Experience']\n    },\n    premium: {\n      name: 'Premium',\n      price: '$14.99',\n      features: ['4K Ultra HD Streaming', '4 Simultaneous Streams', 'Offline Downloads', 'Ad-Free Experience', 'Early Access to New Releases']\n    }\n  };\n\n  const selectedPlan = planDetails[plan];\n\n  return (\n    <div className=\"min-h-screen bg-zinc-900 flex items-center justify-center py-12 px-4\">\n      <div className=\"max-w-2xl w-full\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-12 h-12 rounded-lg alfredflix-gradient flex items-center justify-center\">\n              <span className=\"text-zinc-900 font-bold text-lg\">A</span>\n            </div>\n            <span className=\"font-serif text-2xl font-semibold alfredflix-text-gradient\">\n              AlfredFlix\n            </span>\n          </div>\n          <h1 className=\"font-serif text-3xl font-semibold text-white mb-2\">\n            Complete Your Subscription\n          </h1>\n          <p className=\"text-zinc-400\">\n            Join thousands of satisfied subscribers enjoying premium entertainment\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Plan Summary */}\n          <Card className=\"luxury-card border-amber-500/20\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-white\">\n                  {selectedPlan.name} Plan\n                </CardTitle>\n                {plan === 'premium' && (\n                  <Badge className=\"alfredflix-gradient text-zinc-900\">\n                    <Crown className=\"w-3 h-3 mr-1\" />\n                    Most Popular\n                  </Badge>\n                )}\n              </div>\n              <div className=\"text-3xl font-bold alfredflix-text-gradient\">\n                {discountedPrice ? (\n                  <div className=\"flex items-center space-x-2\">\n                    <span>{discountedPrice}</span>\n                    <span className=\"text-sm text-zinc-500 line-through\">{selectedPlan.price}</span>\n                  </div>\n                ) : selectedPlan.price}\n                <span className=\"text-lg text-zinc-400 font-normal\">/month</span>\n              </div>\n              {discountedPrice && (\n                <p className=\"text-sm text-amber-500 mt-2\">\n                  {referralParam === 'true' && 'Referral discount applied: First month for $1!'}\n                  {couponParam === 'demo1' && 'Coupon discount applied: 10% off!'}\n                </p>\n              )}\n            </CardHeader>\n            <CardContent>\n              <ul className=\"space-y-3\">\n                {selectedPlan.features.map((feature, index) => (\n                  <li key={index} className=\"flex items-center text-zinc-300\">\n                    <Check className=\"w-5 h-5 text-amber-500 mr-3 flex-shrink-0\" />\n                    {feature}\n                  </li>\n                ))}\n              </ul>\n\n              <div className=\"mt-6 pt-6 border-t border-zinc-700\">\n                <div className=\"flex items-center space-x-4 text-sm text-zinc-400\">\n                  <div className=\"flex items-center\">\n                    <Shield className=\"w-4 h-4 mr-1\" />\n                    Secure Payment\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Zap className=\"w-4 h-4 mr-1\" />\n                    Instant Access\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Monitor className=\"w-4 h-4 mr-1\" />\n                    All Devices\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Form */}\n          <Card className=\"luxury-card\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Payment Details</CardTitle>\n              <p className=\"text-zinc-400 text-sm\">\n                Secure payment powered by Stripe. Cancel anytime.\n              </p>\n            </CardHeader>\n            <CardContent>\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"payment-element-container\">\n                  <PaymentElement \n                    options={{\n                      layout: 'tabs',\n                      paymentMethodOrder: ['card', 'paypal', 'link']\n                    }}\n                  />\n                </div>\n                \n                <Button\n                  type=\"submit\"\n                  disabled={!stripe || isLoading}\n                  className=\"w-full alfredflix-gradient text-zinc-900 hover:shadow-lg transition-all duration-300 py-6 text-lg font-semibold\"\n                  data-testid=\"subscribe-button\"\n                >\n                  {isLoading ? (\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-4 h-4 border-2 border-zinc-900 border-t-transparent rounded-full animate-spin\" />\n                      <span>Processing...</span>\n                    </div>\n                  ) : (\n                    `Start ${selectedPlan.name} Plan - ${selectedPlan.price}/month`\n                  )}\n                </Button>\n\n                <p className=\"text-xs text-zinc-500 text-center leading-relaxed\">\n                  By subscribing, you agree to our Terms of Service and Privacy Policy. \n                  Your subscription will automatically renew monthly. Cancel anytime from your account settings.\n                </p>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Trust Indicators */}\n        <div className=\"mt-8 text-center\">\n          <div className=\"flex items-center justify-center space-x-6 text-xs text-zinc-600\">\n            <span>🔒 SSL Secured</span>\n            <span>💳 Stripe Protected</span>\n            <span>⭐ 4.9/5 Rating</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function Subscribe() {\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [plan, setPlan] = useState<'standard' | 'premium'>('standard');\n\n  useEffect(() => {\n    // Get plan and coupon from URL params\n    const urlParams = new URLSearchParams(window.location.search);\n    const planParam = urlParams.get('plan') as 'standard' | 'premium';\n    const couponParam = urlParams.get('coupon');\n    const referralParam = urlParams.get('referral');\n    \n    if (planParam) {\n      setPlan(planParam);\n    }\n\n    // Create subscription with coupon support\n    const requestData: any = { plan: planParam || 'standard' };\n    if (couponParam) requestData.coupon = couponParam;\n    if (referralParam && referralParam !== 'true') {\n      // referralParam contains the actual referral code\n      requestData.referralCode = referralParam;\n    }\n\n    apiRequest(\"POST\", \"/api/create-subscription\", requestData)\n      .then((res) => res.json())\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n      })\n      .catch((error) => {\n        console.error('Failed to create subscription:', error);\n      });\n  }, []);\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen bg-zinc-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-amber-500 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-zinc-400\">Preparing your subscription...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <Elements stripe={stripePromise} options={{ clientSecret }}>\n      <SubscribeForm plan={plan} />\n    </Elements>\n  );\n}","size_bytes":10520},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants };","size_bytes":1132},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\";\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\";\nimport { Check, ChevronRight, Circle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst DropdownMenu = DropdownMenuPrimitive.Root;\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group;\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal;\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub;\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean;\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n));\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName;\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName;\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n));\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n));\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName;\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n));\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean;\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n));\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  );\n};\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\";\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n};","size_bytes":7326},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as React from \"react\";\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nconst Sheet = SheetPrimitive.Root;\n\nconst SheetTrigger = SheetPrimitive.Trigger;\n\nconst SheetClose = SheetPrimitive.Close;\n\nconst SheetPortal = SheetPrimitive.Portal;\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName;\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n);\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n));\nSheetContent.displayName = SheetPrimitive.Content.displayName;\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nSheetHeader.displayName = \"SheetHeader\";\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nSheetFooter.displayName = \"SheetFooter\";\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n));\nSheetTitle.displayName = SheetPrimitive.Title.displayName;\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nSheetDescription.displayName = SheetPrimitive.Description.displayName;\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n};","size_bytes":4286},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}